{"version":3,"sources":["ParseTree.tsx","index.tsx"],"names":["renderCircleSvgNode","props","r","fill","nodeDatum","children","__rd3t","collapsed","onClick","toggleNode","strokeWidth","x","name","ParseTree","render","data","args","custom_style","theme","id","style","orientation","separation","siblings","nonSiblings","renderCustomNodeElement","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6SAiBMA,G,MAAsB,SAACC,GAAD,OAC1B,2BACE,4BACEC,EAAE,KACFC,KAAMF,EAAMG,UAAUC,WAAaJ,EAAMG,UAAUE,OAAOC,UAAY,UAAY,QAClFC,QAASP,EAAMQ,aAEjB,0BAAMN,KAAK,QAAQO,YAAY,IAAIC,EAAE,MAClCV,EAAMG,UAAUQ,SAKjBC,E,4MACGC,OAAS,WAGd,IAAMC,EAAO,EAAKd,MAAMe,KAAX,KACPC,EAAa,EAAKhB,MAAMe,KAAX,MAID,EAAKf,MAAfiB,MAMR,OACE,yBAAKC,GAAG,cAAcC,MAAOH,GACzB,kBAAC,IAAD,CAAMF,KAAMA,EACZM,YAAY,WACZC,WAPa,CAACC,SAAS,EAAEC,YAAY,GAQrCC,wBAAyBzB,M,yBApBX0B,KAkCTC,cAAwBd,GC5DvCe,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.53bd2766.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport Tree from 'react-d3-tree';\nimport './custom_tree.css'\n\ninterface RawNodeDatum {\n  name: string;\n  attributes?: Record<string, string | number | boolean>;\n  children?: RawNodeDatum[];\n}\n\n\n\nconst renderCircleSvgNode = (props:any) => (\n  <g>\n    <circle\n      r=\"15\"\n      fill={props.nodeDatum.children && (props.nodeDatum.__rd3t.collapsed ? \"skyblue\" : \"grey\")}\n      onClick={props.toggleNode}\n    />\n    <text fill=\"black\" strokeWidth=\"1\" x=\"20\">\n      {props.nodeDatum.name}\n    </text>\n  </g>\n)\n\nclass ParseTree extends StreamlitComponentBase {\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const data = this.props.args[\"data\"]\n    const custom_style=this.props.args['style']\n    //need to make a converter for input to acceptable output\n    // input: parseTree from constituency parser\n    // output: sth like orgChart\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const default_sep= {siblings:2,nonSiblings:2}\n\n\n    return (\n      <div id=\"treeWrapper\" style={custom_style}>\n          <Tree data={data}\n          orientation='vertical' \n          separation={default_sep}\n          renderCustomNodeElement={renderCircleSvgNode}\n          />\n      </div>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(ParseTree)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ParseTree from \"./ParseTree\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ParseTree />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}