{"version":3,"sources":["Pagnation.tsx","index.tsx"],"names":["Pagnation","props","render","pages","args","max_pages","hvrclr","atvclr","className","onClick","state","pageNumber","onClickPrevOrNext","style","visibility","filter","number","offset","map","e","onClickNumber","length","setState","prevState","clickPrevOrNext","Streamlit","setComponentValue","max","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"mQAoBMA,G,wDACJ,WAAmBC,GAAwB,IAAD,8BACxC,cAAMA,IAMDC,OAAS,WAGd,IAAMC,EAAQ,EAAKF,MAAMG,KAAX,MACRC,EAAY,EAAKJ,MAAMG,KAAX,IACZE,EAAS,EAAKL,MAAMG,KAAX,OACTG,EAAS,EAAKN,MAAMG,KAAX,OAMf,OACE,8BACE,sGAG4BE,EAH5B,uFAMsBC,EANtB,sBAUA,yBAAKC,UAAU,aACb,qCACA,4BAAQA,UAAU,MAAMC,QAAS,kBAAM,EAAKC,MAAMC,WAAa,EAC/C,EAAKC,kBAAkB,EAAKF,MAAMC,WAAa,EAAGN,GAClD,EAAKO,kBAAkB,EAAGP,IAClCQ,MAAO,CAACC,WAAY,EAAKJ,MAAMC,WAAa,EAChC,UAAY,WAJhC,QAFF,OAUIR,QAVJ,IAUIA,OAVJ,EAUIA,EAAOY,QAAO,SAACC,GACb,OAAIX,EAAY,EACVW,EAAS,EAAKN,MAAMO,QAAUD,EAAS,EAAKN,MAAMO,OAASZ,EAAY,EAElEW,OAFT,EAKOA,KAERE,KAAI,SAACF,GAAD,OACP,4BAAQR,UAAW,EAAKE,MAAMC,YAAcK,EAAS,aAAe,MAC5DP,QAAS,SAACU,GAAD,OAAO,EAAKC,cAAcJ,KACxCA,MAIL,4BAAQR,UAAU,MACVC,QAAS,kBAAM,EAAKC,MAAMC,WAAaR,EAAMA,EAAMkB,OAAS,GACpD,EAAKT,kBAAkB,EAAKF,MAAMC,WAAa,EAAGN,GAClD,EAAKO,kBAAkBT,EAAMA,EAAMkB,OAAS,GAAIhB,IACxDQ,MAAO,CAACC,WAAY,EAAKJ,MAAMC,WAAaR,EAAMA,EAAMkB,OAAS,GAChD,UAAY,WALrC,WAzDkC,EAuElCD,cAAgB,SAACJ,GAGvB,EAAKM,UACH,SAAAC,GAAS,MAAK,CAAEZ,WAAYK,EAAQQ,iBAAiB,MACrD,kBAAMC,IAAUC,kBAAkB,EAAKhB,MAAMC,gBA5EP,EAgFlCC,kBAAoB,SAACI,EAAgBW,GAKvC,EAAKjB,MAAMO,OAASU,EAAMX,EAC5B,EAAKM,SAAU,CACbL,OAAQ,EAAKP,MAAMO,OAAS,IAErB,EAAKP,MAAMO,OAAS,EAAID,GAAU,EAAKN,MAAMO,OAAS,GAC/D,EAAKK,SAAS,CACZL,OAAQ,EAAKP,MAAMO,OAAS,IAIhC,EAAKK,UACH,SAAAC,GAAS,MAAK,CAAEZ,WAAYK,EAAQQ,iBAAiB,MACrD,WAAOC,IAAUC,kBAAkB,EAAKhB,MAAMC,gBA9FhD,EAAKD,MAAQ,CAACC,WAAY,EAAGa,iBAAiB,EAAOP,OAAQ,GAC7DQ,IAAUC,kBAAkB,GAJY,E,uBADpBE,MA4GTC,cAAwB7B,GC5HvC8B,IAAS5B,OACP,kBAAC,IAAM6B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3ac2dffb.chunk.js","sourcesContent":["import {\r\n  ComponentProps,\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport \"./styles.css\"\r\n\r\n\r\ninterface State {\r\n  pageNumber: number\r\n  clickPrevOrNext: boolean\r\n  offset: number\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass Pagnation extends StreamlitComponentBase<State> {\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    this.state = {pageNumber: 1, clickPrevOrNext: false, offset: 0}\r\n    Streamlit.setComponentValue(1)\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const pages = this.props.args[\"pages\"]\r\n    const max_pages = this.props.args[\"max\"]\r\n    const hvrclr = this.props.args[\"hvrclr\"]\r\n    const atvclr = this.props.args[\"atvclr\"]\r\n\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        <style>\r\n          {\r\n            `.btn:hover:not(.active) {\r\n                background-color: ${hvrclr};\r\n              }\r\n             .btn.active {\r\n                background: ${atvclr};\r\n             }`\r\n          }\r\n        </style>\r\n        <div className=\"pagnation\">\r\n          <div>&nbsp;</div>\r\n          <button className=\"btn\" onClick={() => this.state.pageNumber > 1 ? \r\n                          this.onClickPrevOrNext(this.state.pageNumber - 1, max_pages) : \r\n                          this.onClickPrevOrNext(1, max_pages)}\r\n                  style={{visibility: this.state.pageNumber > 1 ?\r\n                              \"visible\" : 'hidden'}}>\r\n            Prev\r\n          </button>\r\n          {\r\n            pages?.filter((number: number) => {\r\n              if (max_pages > 0) {\r\n                if (number > this.state.offset && number < this.state.offset + max_pages + 1) {\r\n\r\n                  return number;\r\n                }\r\n              } else {\r\n                return number;\r\n              }\r\n            }).map((number: number) =>\r\n            <button className={this.state.pageNumber == number ? 'btn active' : 'btn'}\r\n                    onClick={(e) => this.onClickNumber(number)}>\r\n              {number}\r\n            </button>\r\n            )\r\n          }\r\n          <button className=\"btn\"\r\n                  onClick={() => this.state.pageNumber < pages[pages.length - 1] ? \r\n                          this.onClickPrevOrNext(this.state.pageNumber + 1, max_pages) : \r\n                          this.onClickPrevOrNext(pages[pages.length - 1], max_pages)}\r\n                  style={{visibility: this.state.pageNumber < pages[pages.length - 1] ?\r\n                                   \"visible\" : 'hidden'}}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private onClickNumber = (number: number): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    this.setState(\r\n      prevState => ({ pageNumber: number, clickPrevOrNext: false }),\r\n      () => Streamlit.setComponentValue(this.state.pageNumber)\r\n    )\r\n  }\r\n\r\n  private onClickPrevOrNext = (number: number, max: number): void => {\r\n    // Increment state.numClicks, and pass the new value back to\r\n    // Streamlit via `Streamlit.setComponentValue`.\r\n    // 1 2 3 4 5\r\n    // 2 3 4 5 6\r\n    if (this.state.offset + max < number) {\r\n      this.setState ({\r\n        offset: this.state.offset + 1\r\n      })\r\n    } else if (this.state.offset + 1 > number && this.state.offset > 0) {\r\n      this.setState({\r\n        offset: this.state.offset - 1\r\n      })\r\n    }\r\n    \r\n    this.setState(\r\n      prevState => ({ pageNumber: number, clickPrevOrNext: true}),\r\n      () => {Streamlit.setComponentValue(this.state.pageNumber)}\r\n    )\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(Pagnation)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport Pagnation from \"./Pagnation\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Pagnation />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}