from typing import Tuple
from typing import List

from compas.geometry import Point
from compas.geometry import Vector
from compas.geometry import Frame
from compas.geometry import Box
from compas.geometry import Line
from compas.geometry import Surface
from compas.geometry import Transformation
from compas.datastructures import Mesh

from OCC.Core.Geom import Geom_Surface
from OCC.Core.TopoDS import TopoDS_Face
from OCC.Core.TopoDS import TopoDS_Shape

from compas_occ.geometry.curves import OCCCurve


class OCCSurface(Surface):

    def __init__(self, name: str = None) -> None: ...

    @property
    def occ_surface(self) -> Geom_Surface: ...

    @occ_surface.setter
    def occ_surface(self, surface: Geom_Surface) -> None: ...

    @classmethod
    def from_occ(cls, occ_surface: Geom_Surface) -> 'OCCSurface': ...

    @classmethod
    def from_face(cls, face: TopoDS_Face) -> 'OCCSurface': ...

    def to_step(self, filepath: str, schema: str = "AP203") -> None: ...

    def to_tesselation(self) -> Mesh: ...

    @property
    def occ_shape(self) -> TopoDS_Shape: ...

    @property
    def occ_face(self) -> TopoDS_Face: ...

    @property
    def u_degree(self) -> int: ...

    @property
    def v_degree(self) -> int: ...

    @property
    def u_domain(self) -> Tuple[float, float]: ...

    @property
    def v_domain(self) -> Tuple[float, float]: ...

    @property
    def is_u_periodic(self) -> bool: ...

    @property
    def is_v_periodic(self) -> bool: ...

    def transform(self, T: Transformation) -> None: ...

    def u_isocurve(self, u: float) -> OCCCurve: ...

    def v_isocurve(self, v: float) -> OCCCurve: ...

    def boundary(self) -> List[OCCCurve]: ...

    def point_at(self, u: float, v: float) -> Point: ...

    def curvature_at(self, u: float, v: float) -> Vector: ...

    def frame_at(self, u: float, v: float) -> Frame: ...

    def aabb(self, precision: float = 0.0, optimal: bool = False) -> Box: ...

    def closest_point(self, point: Point, return_parameters: bool = False) -> Point: ...

    def obb(self, precision: float = 0.0) -> Box: ...

    def intersections_with_line(self, line: Line) -> List[Point]: ...
