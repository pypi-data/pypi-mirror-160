.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SigFigs 3"
.TH SigFigs 3 "2003-09-11" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Math::SigFigs \- do math with correct handling of significant figures
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
If you only need to use CountSigFigs and FormatSigFigs, use the first
form.  If you are going to be doing arithmetic, use the second line.
.PP
.Vb 2
\&  use Math::SigFigs;
\&  use Math::SigFigs qw(:all);
.Ve
.PP
The following routines do simple counting/formatting:
.PP
.Vb 2
\&  $n=CountSigFigs($num);
\&  $num=FormatSigFigs($num,$n);
.Ve
.PP
Use the following routines to do arithmetic operations.
.PP
.Vb 4
\&  $num=addSF($n1,$n2);
\&  $num=subSF($n1,$n2);
\&  $num=multSF($n1,$n2);
\&  $num=divSF($n1,$n2);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
In many scientific applications, it is often useful to be able to format
numbers with a given number of significant figures, or to do math in
such a way as to maintain the correct number of significant figures.
The rules for significant figures are too complicated to be handled solely
using the sprintf function (unless you happen to be Randal Schwartz :\-).
.PP
These routines allow you to correctly handle significan figures.
.PP
It can count the number of significan figures, format a number to a
given number of significant figures, and do basic arithmetic.
.SH "ROUTINES"
.IX Header "ROUTINES"
.IP "CountSigFigs" 4
.IX Item "CountSigFigs"
.Vb 1
\&  $n=CountSigFigs($N);
.Ve
.Sp
This returns the number of significant figures in a number.  It returns
() if \f(CW$N\fR is not a number.
.Sp
.Vb 9
\&  $N      $n
\&  -----   --
\&  240     2
\&  240.    3
\&  241     3
\&  0240    2
\&  0.03    1
\&  0       0
\&  0.0     0
.Ve
.IP "FormatSigFigs" 4
.IX Item "FormatSigFigs"
.Vb 1
\&  $str=FormatSigFigs($N,$n)
.Ve
.Sp
This returns a string containing \f(CW$N\fR formatted to \f(CW$n\fR significant figures.
This will work for all cases except something like \*(L"2400\*(R" formatted to
3 significant figures.
.Sp
.Vb 7
\&  $N     $n   $str
\&  ------ --   -------
\&  2400    1   2000
\&  2400    2   2400
\&  2400    3   2400
\&  2400    4   2400.
\&  2400    5   2400.0
.Ve
.Sp
.Vb 2
\&  141     3   141.
\&  141     2   140
.Ve
.Sp
.Vb 2
\&  0.039   1   0.04
\&  0.039   2   0.039
.Ve
.Sp
.Vb 3
\&  9.9     1   10
\&  9.9     2   9.9
\&  9.9     3   9.90
.Ve
.IP "addSF, subSF, multSF, divSF" 4
.IX Item "addSF, subSF, multSF, divSF"
These routines add/subtract/multiply/divide two numbers while maintaining
the proper number of significant figures.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
.IP "Without scientific notation, some numbers are ambiguous" 4
.IX Item "Without scientific notation, some numbers are ambiguous"
These routines do not work with scientific notation (exponents).  As a
result, it is impossible to unambiguously format some numbers.  For
example,
.Sp
.Vb 1
\&  $str=FormatSigFigs("2400",3);
.Ve
.Sp
will by necessity return the string \*(L"2400\*(R" which does \s-1NOT\s0 have 3
significant figures.  This is not a bug.  It is simply a fundamental
problem with working with significant figures when not using scientific
notation.
.IP "A bug in some printf library calls on the Mac" 4
.IX Item "A bug in some printf library calls on the Mac"
One of the tests
.Sp
.Vb 1
\&   FormatSigFigs(0.99,1)  =>  1.
.Ve
.Sp
fails on at least some Mac \s-1OS\s0 versions.  It gives \*(L"0.\*(R" instead of \*(L"1.\*(R"
and comes when the call:
.Sp
.Vb 1
\&   printf("%.0f","0.99")
.Ve
.Sp
returns 0 instead of 1.  I have not added a workaround for this.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sullivan Beck (sbeck@cpan.org)
