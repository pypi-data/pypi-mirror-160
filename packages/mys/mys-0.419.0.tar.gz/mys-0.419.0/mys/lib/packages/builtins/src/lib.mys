class String:
    """A sequence of unicode characters. Immutable.

    """

    func __init__(self):
        """Create an empty string. Same as ``""``.

        """

    func __init__(self, character: char):
        """From a character.

        """

    func __init__(self, other: string):
        """From a string.

        """

    func __init__(self, other: bytes):
        """From a UTF-8 encoded string.

        """

    func __init__(self, other: bytes, start: i64, end: i64):
        """From a UTF-8 encoded string.

        """

    func to_utf8(self) -> bytes:
        """To UTF-8 bytes.

        """

    func __add__(self, other: string) -> string:
        """Add a string.

        """

    func __add__(self, other: char) -> string:
        """Add a character.

        """

    func __eq__(self, other: string) -> string:
        """

        """

    func __ne__(self, other: string) -> string:
        """

        """

    func __mul__(self, count: i64) -> string:
        """Repeat the string count times.

        """

    func __getitem__(self, index: i64) -> char:
        """Get character at given index.

        """

    func __getitem__(self, begin: i64, end: i64, step: i64) -> string:
        """Get a substring.

        """

    func __in__(self, value: char) -> bool:
        """Contains character.

        """

    func __in__(self, value: string) -> bool:
        """Contains string.

        """

    func starts_with(self, substring: string) -> bool:
        """Returns true if string starts with given substring.

        """

    func split(self, separator: string) -> [string]:
        """Split into list of strings with given separator string.

        """

    func split(self, separator: Regex) -> [string]:
        """

        """

    func join(self, parts: [string]) -> string:
        """Join given list of strings with the string itself.

        """

    func strip(self, chars: string) -> string:
        """Strip leading and trailing characters.

        """

    func strip_left(self, chars: string) -> string:
        """Strip leading characters.

        """

    func strip_right(self, chars: string) -> string:
        """Strip trailing characters.

        """

    func lower(self) -> string:
        """Make string lower case.

        """

    func upper(self) -> string:
        """Make string upper case.

        """

    func capitalize(self) -> string:
        """Capitalize string.

        """

    func casefold(self) -> string:
        """Stronger variant of lower that should be used when doing case
        insensitive comparison.

        """

    func find(self, sub: char, start: i64, end: i64) -> i64:
        """Find the first occurrence of given character within given
        limits. Returns -1 if not found.

        """

    func find(self, sub: string, start: i64, end: i64) -> i64:
        """Find the first occurrence of given substring within given
        limits. Returns -1 if not found.

        """

    func partition(self, separator: char) -> (string, char, string):
        """Find the first occurrence of given separator. If found, returns a
        tuple with characters before separator, the separator itself
        and the characters after the separator. If not found, returns
        the original string and the empty character as separator and
        the empty string as sencond part.

        """

    func partition(self, separator: string) -> (string, string, string):
        """Find the first occurrence of given separator. If found, returns a
        tuple with characters before separator, the separator itself
        and the characters after the separator. If not found, returns
        the original string and the empty string as separator and
        sencond part.

        """

    func replace(self, old: char, new: char) -> string:
        """Replace old with new.

        """

    func replace(self, old: string, new: string) -> string:
        """Replace old with new.

        """

    func replace(self, old: Regex, new: string) -> string:
        """Replace old with new.

        """

    func match(self, pattern: Regex) -> RegexMatch:
        """Match against given regular expression.

        """

class Bytes:
    """A sequence of bytes.

    """

    func __init__(self):
        """Create an empty bytes object. Same as ``b""``.

        """

    func __getitem__(self, index: i64) -> u8:
        """Get byte at given index.

        """

    func __getitem__(self, begin: i64, end: i64, step: i64) -> bytes:
        """Get subbytes.

        """

@generic(T)
class List:
    """A list with items of type T.

    ``[]`` is syntaxtic sugar for lists.

    """

    func __init__(self):
        """Create an empty list. Same as ``[]``.

        """

    func __getitem__(self, index: i64) -> T:
        """

        """

    func __getitem__(self, begin: i64, end: i64, step: i64) -> [T]:
        """Get a sublist.

        """

    func __setitem__(self, index: i64, value: T):
        """

        """

    func sort(self):
        """Sort items in place.

        """

    func reverse(self):
        """Reverse items in place.

        """

@generic(TK, TV)
class Dict:
    """A dictionary with keys of type TK and values of type TV.

    ``{}`` is syntaxtic sugar for dicts.

    """

    func __init__(self):
        """Create an empty dictionary. Same as ``{}``.

        """

    func __getitem__(self, key: TK) -> TV:
        """Get value for key.

        """

    func __setitem__(self, key: TK, value: TV):
        """

        """

    func get(self, key: TK, default: TV) -> TV:
        """Get value for key. Return default if missing.

        """

    func keys(self) -> [TK]:
        """Get a list of all keys.

        """

    func values(self) -> [TV]:
        """Get a list of all values.

        """
