# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pymazda', 'pymazda.sensordata']

package_data = \
{'': ['*']}

install_requires = \
['aiohttp>=3,<4', 'cryptography>=36.0.2']

setup_kwargs = {
    'name': 'pymazda',
    'version': '0.3.7',
    'description': 'An API client for interacting with the MyMazda (Mazda Connected Services) API',
    'long_description': '# pymazda\n\nThis is an API client for the MyMazda (Mazda Connected Services) API. This is the API used by the MyMazda mobile app ([iOS](https://apps.apple.com/us/app/mymazda/id451886367)/[Android](https://play.google.com/store/apps/details?id=com.interrait.mymazda)).\n\nNote: There is no official API, and this library may stop working at any time without warning.\n\nThere is also a JavaScript version of this library called [node-mymazda](https://github.com/bdr99/node-mymazda).\n\n# Installation\n\nTo install the latest release from [PyPI](https://pypi.org/project/pymazda/), run `pip3 install pymazda`.\n\n# Quick Start\n\nThis example initializes the API client and gets a list of vehicles linked to the account. Then, for each vehicle, it gets and outputs the vehicle status and starts the engine.\n\n```python\nimport asyncio\nimport pymazda\n\nasync def test() -> None:\n    # Initialize API client (MNAO = North America)\n    client = pymazda.Client("myemail", "mypassword", "MNAO")\n\n    # Get list of vehicles from the API (returns a list)\n    vehicles = await client.get_vehicles()\n\n    # Loop through the registered vehicles\n    for vehicle in vehicles:\n        # Get vehicle ID (you will need this in order to perform any other actions with the vehicle)\n        vehicle_id = vehicle["id"]\n\n        # Get and output vehicle status\n        status = await client.get_vehicle_status(vehicle_id)\n        print(status)\n\n        # Start engine\n        await client.start_engine(vehicle_id)\n    \n    # Close the session\n    await client.close()\n\nif __name__ == "__main__":\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(test())\n```\n\nYou will need the email address and password that you use to sign into the MyMazda mobile app. Before using this library, you will need to link your vehicle to your MyMazda account using the app. You will also need the region code for your region. See below for a list of region codes.\n\nWhen calling these methods, it may take some time for the vehicle to respond accordingly. This is dependent on the quality of the car\'s connection to the mobile network. It is best to avoid making too many API calls in a short time period of time, as this may result in rate limiting.\n\n# API Documentation\n\n## Initialize API Client\n\n```python\nclient = pymazda.Client(email, password, region, websession)\n```\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `email`   | The email address you use to log into the MyMazda mobile app |\n| `password` | The password you use to log into the MyMazda mobile app |\n| `region` | The code for the region in which your account was registered<br>Supported regions include:<ul><li>North America (`MNAO`)</li><li>Europe (`MME`)</li><li>Japan (`MJO`)</li></ul> |\n| `websession` | Optional. An instance of `aiohttp.ClientSession` to be used for the API requests. If omitted, the library will instantiate its own instance. |\n| `use_cached_vehicle_list` | Optional. Set to `True` to enable caching for the `get_vehicles()` call. When `get_vehicles()` is called for the first time, the vehicle list will be fetched from the API and cached in memory. Subsequent calls will return the value from the cache. This may help to avoid rate limiting. |\n\n### Return value\n\nReturns an instance of `pymazda.Client` which can be used to invoke the below methods.\n\n## Get List of Vehicles\n\n```python\nawait client.get_vehicles()\n```\n\nGets a list of vehicles linked with the MyMazda account. **Only includes vehicles which are compatible with and enrolled in Mazda Connected Services.**\n\n### Parameters\n\nNone\n\n### Return value\n\n```jsonc\n[\n   {\n      "vin": "JMXXXXXXXXXXXXXXX",\n      "id": 12345,\n      "nickname": "My Mazda3",\n      "carlineCode": "M3S",\n      "carlineName": "MAZDA3 2.5 S SE AWD",\n      "modelYear": "2021",\n      "modelCode": "M3S  SE XA",\n      "modelName": "W/ SELECT PKG AWD SDN",\n      "automaticTransmission": true,\n      "interiorColorCode": "BY3",\n      "interiorColorName": "BLACK",\n      "exteriorColorCode": "42M",\n      "exteriorColorName": "DEEP CRYSTAL BLUE MICA",\n      "isElectric": false\n   },\n   {\n      // Other vehicles registered to your account\n   }\n]\n```\n\n## Get vehicle status\n\n```python\nawait client.get_vehicle_status(vehicle_id)\n```\n\nGet information about the current status of the vehicle. In my experience, this info is usually current as of the last time the vehicle was used.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\n```jsonc\n{\n   "lastUpdatedTimestamp": "20210227145504",\n   "latitude": 0.000000,\n   "longitude": 0.000000,\n   "positionTimestamp": "20210227145503",\n   "fuelRemainingPercent": 18.0,\n   "fuelDistanceRemainingKm": 79.15,\n   "odometerKm": 3105.8,\n   "doors": {\n      "driverDoorOpen": false,\n      "passengerDoorOpen": false,\n      "rearLeftDoorOpen": false,\n      "rearRightDoorOpen": false,\n      "trunkOpen": false,\n      "hoodOpen": false,\n      "fuelLidOpen": false\n   },\n   "doorLocks":{\n      "driverDoorUnlocked": false,\n      "passengerDoorUnlocked": false,\n      "rearLeftDoorUnlocked": false,\n      "rearRightDoorUnlocked": false\n   },\n   "windows":{\n      "driverWindowOpen": false,\n      "passengerWindowOpen": false,\n      "rearLeftWindowOpen": false,\n      "rearRightWindowOpen": false\n   },\n   "hazardLightsOn": false,\n   "tirePressure": {\n      "frontLeftTirePressurePsi": 33.0,\n      "frontRightTirePressurePsi": 35.0,\n      "rearLeftTirePressurePsi": 33.0,\n      "rearRightTirePressurePsi": 33.0\n   }\n}\n```\n\n## Get EV vehicle status\n\n```python\nawait client.get_ev_vehicle_status(vehicle_id)\n```\n\nGet additional status information which is specific to electric vehicles. This method should only be called for electric vehicles. To determine if the vehicle is electric, use the `isElectric` attribute from the `get_vehicles()` response.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\n```jsonc\n{\n    "lastUpdatedTimestamp": "20210807083956",\n    "chargeInfo": {\n        "batteryLevelPercentage": 10,\n        "drivingRangeKm": 218,\n        "pluggedIn": false,\n        "charging": true,\n        "basicChargeTimeMinutes": 3, // Estimated time in minutes to fully charge using AC charging\n        "quickChargeTimeMinutes": 0, // Estimated time in minutes to fully charge using DC charging\n        "batteryHeaterAuto": true, // Current battery heater mode (true = auto, false = off)\n        "batteryHeaterOn": true // Whether the battery heater is currently running\n    },\n    "hvacInfo": {\n        "hvacOn": true,\n        "frontDefroster": false,\n        "rearDefroster": false,\n        "interiorTemperatureCelsius": 15.1 // Current interior temperature of the car (actual temperature, not the HVAC setting)\n    }\n}\n```\n\n## Start Engine\n\n```python\nawait client.start_engine(vehicle_id)\n```\n\nStarts the engine. May take some time for the engine to start.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Stop Engine\n\n```python\nawait client.stop_engine(vehicle_id)\n```\n\nStops the engine. I believe this only works if the engine was started remotely (using Mazda Connected Services).\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Lock Doors\n\n```python\nawait client.lock_doors(vehicle_id)\n```\n\nLocks the doors.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Unlock Doors\n\n```python\nawait client.unlock_doors(vehicle_id)\n```\n\nUnlocks the doors.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Turn On Hazard Lights\n\n```python\nawait client.turn_on_hazard_lights(vehicle_id)\n```\n\nTurns on the vehicle hazard lights.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Turn Off Hazard Lights\n\n```python\nawait client.turn_off_hazard_lights(vehicle_id)\n```\n\nTurns off the vehicle hazard lights.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Send POI\n\n```python\nawait client.send_poi(vehicle_id, latitude, longitude, poi_name)\n```\n\nSend a GPS location to the vehicle\'s navigation. Requires a navigation SD card in the vehicle.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n| `latitude` | Latitude of the POI location |\n| `longitude` | Longitude of the POI location|\n| `poi_name` | A friendly name for the location (e.g. "Work") |\n\n### Return value\n\nNone\n\n## Start Charging\n\n```python\nawait client.start_charging(vehicle_id)\n```\n\nStarts charging the battery (only for electric vehicles).\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Stop Charging\n\n```python\nawait client.stop_charging(vehicle_id)\n```\n\nStops charging the battery (only for electric vehicles).\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Get HVAC Setting\n\n```python\nawait client.get_hvac_setting(vehicle_id)\n```\n\nGet the current settings for the vehicle\'s HVAC system. Only for electric vehicles.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\n```jsonc\n{\n    "temperature": 20, // Current target temperature (NOT the current interior temperature reading)\n    "temperatureUnit": "C",\n    "frontDefroster": true,\n    "rearDefroster": false\n}\n```\n\n## Set HVAC Setting\n\n```python\nawait client.set_hvac_setting(vehicle_id, temperature, temperature_unit, front_defroster, rear_defroster)\n```\n\nSet the HVAC settings for the vehicle\'s HVAC system. Only for electric vehicles.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n| `temperature` | Desired target temperature |\n| `temperature_unit` | Temperature unit - `"F"` or `"C"` |\n| `front_defroster` | Whether to use the front defroster - `True` or `False` |\n| `rear_defroster` | Whether to use the rear defroster - `True` or `False` |\n\n### Return value\n\nNone\n\n## Turn On HVAC\n\n```python\nawait client.turn_on_hvac(vehicle_id)\n```\n\nTurn on the vehicle\'s HVAC system. Only for electric vehicles.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Turn Off HVAC\n\n```python\nawait client.turn_off_hvac(vehicle_id)\n```\n\nTurn off the vehicle\'s HVAC system. Only for electric vehicles.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Refresh Vehicle Status\n\n```python\nawait client.refresh_vehicle_status(vehicle_id)\n```\n\nRequest a new status update from the vehicle. This is only for electric vehicles, and it only updates the info returned by `get_ev_vehicle_status()`, not `get_vehicle_status()`.\n\n### Parameters\n\n| Parameter | Description |\n| --------- | ----------- |\n| `vehicle_id` | Vehicle ID (obtained from `get_vehicles()`) |\n\n### Return value\n\nNone\n\n## Close Session\n\n```python\nawait client.close()\n```\n\nThis releases the `ClientSession` used by `aiohttp` to make the API requests. You should close the session when you are finished making requests.\n\n### Parameters\n\nNone\n\n### Return value\n\nNone',
    'author': 'Brandon Rothweiler',
    'author_email': 'brandonrothweiler@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/bdr99/pymazda',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
