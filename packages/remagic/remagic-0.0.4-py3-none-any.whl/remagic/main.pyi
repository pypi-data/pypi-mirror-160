from typing import Union, Generic, AnyStr, Mapping, Iterable

import regex

from .pattern import Pattern

_Pattern = Union[Pattern, regex.Pattern]
_Iterable = Union[Mapping[str, _Pattern], Generic[AnyStr], Iterable]

def create(pattern: Union[Pattern, Generic[AnyStr]]) -> Pattern: ...
def char_in(iterable: _Iterable) -> Pattern: ...
def char_not_in(iterable: _Iterable) -> Pattern: ...
def any_of(iterable: _Iterable) -> Pattern: ...
def exactly(iterable: _Iterable) -> Pattern: ...
