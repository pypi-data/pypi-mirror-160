##################### generated by xml-casa (v2) from uvcontsub3.xml ################
##################### 8a004f1d57e5d12b72cfd52fbffbf5e7 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_uvcontsub3 import uvcontsub3 as _uvcontsub3_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _uvcontsub3:
    """
    uvcontsub3 ---- An experimental clone of uvcontsub

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input MS.  Output goes to vis + ".contsub"
    fitspw      Spectral window:channel selection for fitting the continuum
    combine     Data axes to combine for the continuum estimation (none ('') or spw)
    fitorder    Polynomial order for the fits
    field       Select field(s) using id(s) or name(s)
    spw         Spectral window selection for output
    scan        Select data by scan numbers
    intent      Select data by scan intents
    correlation Select correlations
    observation Select by observation ID(s)

    --------- examples -----------------------------------------------------------

    
    
    uvcontsub3 is an experimental clone of uvcontsub with the goal of taking
    less time and temporary disk space.
    
    Continuum fitting and subtraction in the uv plane:
    
    This task estimates the continuum emission by fitting polynomials to
    the real and imaginary parts of the spectral windows and channels
    selected by fitspw.  This fit represents a model of the continuum in
    all channels.
    
    The fitted continuum spectrum is subtracted from all channels
    selected in spw, and the result (presumably only line emission)
    is stored in a new MS (vis + ".contsub").
    It will read from the CORRECTED_DATA column of vis if it is present,
    or DATA if it is not.  Whichever column is read is presumed to have
    already been calibrated.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    fitspw -- Selection of spectral windows and channels to use in the
    fit for the continuum, using general spw:chan syntax.
    See the note under combine.
    default: '' (all)
    example: fitspw='0:5~30;40~55'
    
    combine -- Let the continuum estimation span multiple spectral windows.
    default = '' (Make separate estimates for each spw.)
    combine = 'spw': Necessary when one or more of the spws are
    completely blanketed by lines, so the estimate
    must be made in different spws.
    
    fitorder -- Polynomial order for the fits of the continuum w.r.t.
    frequency.  fitorders > 1 are strongly discouraged
    because high order polynomials have more flexibility, may
    absorb line emission, and tend go wild at the edges of
    fitspw, which is not what you want.
    
    default: 0 (constant); example: fitorder=1
    
    field -- Field selection for continuum estimation and subtraction.
    The estimation and subtraction is done for each selected field
    in turn.  (Run listobs to get lists of the ID and names.)
    default: ''=all fields.  If the field string is a non-negative
    integer, it is assumed to be a field index
    otherwise, it is assumed to be a field name
    field='0~2'; field ids 0,1,2
    field='0,4,5~7'; field ids 0,4,5,6,7
    field='3C286,3C295'; fields named 3C286 and 3C295
    field = '3,4C*'; field id 3, all names starting with 4C
    
    spw -- Select spectral windows for the output.
    default: ''=all spectral windows
    N.B. uvcontsub3 does not yet support exclusion by channels for
    the output.  Meanwhile, use split to further reduce the size
    of the output MS if desired.
    spw='0~2,4'; spectral windows 0,1,2,4
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    
    scan -- Scan number range
    default: ''=all
    
    intent -- Select by scan intent (state).  Case sensitive.
    default: '' = all
    Examples:
    intent = 'CALIBRATE_ATMOSPHERE_REFERENCE'
    intent = 'calibrate_atmosphere_reference'.upper() # same as above
    # Select states that include one or both of CALIBRATE_WVR.REFERENCE
    # or OBSERVE_TARGET_ON_SOURCE.
    intent = 'CALIBRATE_WVR.REFERENCE, OBSERVE_TARGET_ON_SOURCE'
    
    correlation -- Select correlations, e.g. 'rr, ll' or ['XY', 'YX'].
    default '' (all).
    
    observation -- Select by observation ID(s).
    default: '' = all


    """

    _info_group_ = """manipulation"""
    _info_desc_ = """An experimental clone of uvcontsub"""

    def __call__( self, vis='', fitspw='', combine='', fitorder=int(0), field='', spw='', scan='', intent='', correlation='', observation='' ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'fitspw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'combine': {'type': 'cStr', 'coerce': _coerce.to_str}, 'fitorder': {'type': 'cInt'}, 'field': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cInt'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'observation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}}
        doc = {'vis': vis, 'fitspw': fitspw, 'combine': combine, 'fitorder': fitorder, 'field': field, 'spw': spw, 'scan': scan, 'intent': intent, 'correlation': correlation, 'observation': observation}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'uvcontsub3', [ 'vis=' + repr(_pc.document['vis']), 'fitspw=' + repr(_pc.document['fitspw']), 'combine=' + repr(_pc.document['combine']), 'fitorder=' + repr(_pc.document['fitorder']), 'field=' + repr(_pc.document['field']), 'spw=' + repr(_pc.document['spw']), 'scan=' + repr(_pc.document['scan']), 'intent=' + repr(_pc.document['intent']), 'correlation=' + repr(_pc.document['correlation']), 'observation=' + repr(_pc.document['observation']) ] )
        task_result = None
        try:
            task_result = _uvcontsub3_t( _pc.document['vis'], _pc.document['fitspw'], _pc.document['combine'], _pc.document['fitorder'], _pc.document['field'], _pc.document['spw'], _pc.document['scan'], _pc.document['intent'], _pc.document['correlation'], _pc.document['observation'] )
        except Exception as exc:
            _except_log('uvcontsub3', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'uvcontsub3', task_result )
        return task_result

uvcontsub3 = _uvcontsub3( )

