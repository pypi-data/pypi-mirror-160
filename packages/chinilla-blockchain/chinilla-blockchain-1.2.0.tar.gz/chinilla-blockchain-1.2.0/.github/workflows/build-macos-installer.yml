name: Build Installer - MacOS Intel

on:
  workflow_dispatch:
  push:
    branches:
      - 'long_lived/**'
      - main
      - dev
      - 'release/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: MacOS Intel Installer
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]
        os: [macos-11]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: Chinilla/actions/git-ssh-to-https@main

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_APPLE_SECRET
        unset HAS_DO_SECRET

        if [ -n "$APPLE_SECRET" ]; then HAS_APPLE_SECRET='true' ; fi
        echo ::set-output name=HAS_APPLE_SECRET::${HAS_APPLE_SECRET}

        if [ -n "$AWS_SECRET" ]; then HAS_DO_SECRET='true' ; fi
        echo ::set-output name=HAS_DO_SECRET::${HAS_DO_SECRET}
      env:
        APPLE_SECRET: "${{ secrets.APPLE_DEV_ID_APP }}"
        AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

    - name: Create installer version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip install setuptools_scm
        echo "::set-output name=CHINILLA_INSTALLER_VERSION::$(python3 ./build_scripts/installer-version.py)"
        deactivate

    - name: Setup Python environment
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v3
      with:
        # Note that new runners may break this https://github.com/actions/cache/issues/292
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Import Apple app signing certificate
      if: steps.check_secrets.outputs.HAS_APPLE_SECRET
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
        p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

    # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return release.data.tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/chia_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-macos-intel
        wget -O "$GITHUB_WORKSPACE/madmax/chia_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-macos-intel
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/chia_plot_k34"

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
      run: |
        sh install.sh -d

    - name: Setup Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: '16.x'

    - name: Build MacOS DMG
      env:
        CHINILLA_INSTALLER_VERSION: ${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}
        NOTARIZE: ${{ steps.check_secrets.outputs.HAS_APPLE_SECRET }}
        APPLE_NOTARIZE_USERNAME: "${{ secrets.APPLE_NOTARIZE_USERNAME }}"
        APPLE_NOTARIZE_PASSWORD: "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
      run: |
        git -C ./chinilla-blockchain-gui status
        . ./activate
        cd ./build_scripts
        sh build_macos.sh
        cp final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg final_installer/Chinilla-beta-latest.dmg

    - name: Upload MacOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chinilla-installers-macos-dmg-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Create Checksums
      run: |
        ls
        shasum -a 256 ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg > ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg.sha256

    - name: Create Beta Checksum
      if: github.ref == 'refs/heads/main'
      run: |
        ls
        shasum -a 256 ${{ github.workspace }}/build_scripts/final_installer/Chinilla-beta-latest.dmg > ${{ github.workspace }}/build_scripts/final_installer/Chinilla-beta-latest.dmg.sha256

    - name: Upload to DO Spaces
      if: steps.check_secrets.outputs.HAS_DO_SECRET
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg
          out_dir: dev
          cdn_domain: download.chinilla.com

    - name: Install py3createtorrent
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        pip install py3createtorrent

    - name: Create torrent
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        py3createtorrent -f -t udp://tracker.opentrackr.org:1337/announce ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg -o ${{ github.workspace }}/build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg.torrent --webseed https://download.chinilla.com/install/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg
        ls ${{ github.workspace }}/build_scripts/final_installer/

    - name: Upload Beta Installer
      if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-beta-latest.dmg
          out_dir: beta
          cdn_domain: download.chinilla.com

    - name: Upload Beta Installer Sha256
      if: steps.check_secrets.outputs.HAS_DO_SECRET && github.ref == 'refs/heads/main'
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-beta-latest.dmg.sha256
          out_dir: beta
          cdn_domain: download.chinilla.com

    - name: Upload Release Installer
      if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg
          out_dir: install
          cdn_domain: download.chinilla.com

    - name: Upload Release Installer SHA256
      if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg.sha256
          out_dir: install
          cdn_domain: download.chinilla.com

    - name: Upload Release Installer Torrent
      if: steps.check_secrets.outputs.HAS_DO_SECRET && startsWith(github.ref, 'refs/tags/')
      uses: BetaHuhn/do-spaces-action@v2
      with:
          access_key: ${{ secrets.INSTALLER_UPLOAD_KEY}}
          secret_key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
          space_name: ${{ secrets.INSTALLER_UPLOAD_SPACE_NAME }}
          space_region: ${{ secrets.INSTALLER_UPLOAD_SPACE }}
          source: /build_scripts/final_installer/Chinilla-${{ steps.version_number.outputs.CHINILLA_INSTALLER_VERSION }}.dmg.torrent
          out_dir: torrents

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      run: |
        echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"
        echo "::set-output name=REPO_NAME::$(echo ${{ github.repository }} | cut -d'/' -f 2)"
