[tool.poetry]
name = "dndfog"
version = "0.2.0"
description = "DND battle map with fog of war"
authors = [
    "Matti Lamppu <lamppu.matti.akseli@gmail.com>",
]
packages = [
    { include = "dndfog" },
]
license = "MIT"
readme = "README.md"
homepage = "https://mrthearman.github.io/dndfog/"
repository = "https://github.com/MrThearMan/dndfog"
keywords = [
    "dnd",
    "fog",
    "war",
    "map",
    "combat",
    "infinite",
    "gird",
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Natural Language :: English",
]
include = [
    "README.md",
    "LICENSE",
]
exclude = [
    "tests",
]


[tool.poetry.dependencies]
python = ">=3.10"
pygame = "2.1.2"
pywin32 = "304"

[tool.poetry.dev-dependencies]
pytest = "7.1.2"
coverage = "6.4.1"
pre-commit = "2.19.0"
tox = "3.25.0"
tox-gh-actions = "2.9.1"
coveralls = "3.3.1"
mypy = "0.961"
mkdocs = "1.3.0"
pymdown-extensions = "9.5"
mkdocs-mermaid2-plugin = "0.6.0"

[tool.poetry.scripts]
dndfog = "dndfog.main:start"

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
line_length = 120
skip_gitignore = "True"
lines_after_imports = 2

[tool.pylint.MASTER]
ignore-paths = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]

[tool.pylint.BASIC]
good-names = [
    "x",
    "y",
    "f",
    "e",
    "i",
    "j",
]

[tool.pylint.messages_control]
disable = [
    "import-error",
    "too-many-locals",
    "no-else-return",
    "too-many-arguments",
    "too-many-branches",
    "too-many-statements",
    "too-many-nested-blocks",
    "unspecified-encoding",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = "120"

[tool.pylint.miscellaneous]
notes = [
    "BUG",
    "REFACTOR",
    "CHECK",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = "True"
warn_unused_configs = "True"

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]
exclude_lines = [
    "if TYPE_CHECKING:",
    "except ImportError:",
    "pragma: no cover",
]

[tool.pytest.ini_options]
addopts = "-vv -s --log-cli-level=INFO"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py{310, 311}
isolated_build = true

[gh-actions]
python =
    3.10: py310
    3.11: py311

[testenv]
whitelist_externals =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
commands =
    poetry install
    poetry run coverage run -m pytest
"""

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
