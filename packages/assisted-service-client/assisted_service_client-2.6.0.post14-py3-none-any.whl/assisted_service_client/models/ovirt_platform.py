# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OvirtPlatform(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fqdn': 'str',
        'username': 'str',
        'password': 'str',
        'insecure': 'bool',
        'ca_bundle': 'str',
        'cluster_id': 'str',
        'storage_domain_id': 'str',
        'network_name': 'str',
        'vnic_profile_id': 'str'
    }

    attribute_map = {
        'fqdn': 'fqdn',
        'username': 'username',
        'password': 'password',
        'insecure': 'insecure',
        'ca_bundle': 'ca_bundle',
        'cluster_id': 'cluster_id',
        'storage_domain_id': 'storage_domain_id',
        'network_name': 'network_name',
        'vnic_profile_id': 'vnic_profile_id'
    }

    def __init__(self, fqdn=None, username=None, password=None, insecure=True, ca_bundle=None, cluster_id=None, storage_domain_id=None, network_name='ovirtmgmt', vnic_profile_id=None):  # noqa: E501
        """OvirtPlatform - a model defined in Swagger"""  # noqa: E501

        self._fqdn = None
        self._username = None
        self._password = None
        self._insecure = None
        self._ca_bundle = None
        self._cluster_id = None
        self._storage_domain_id = None
        self._network_name = None
        self._vnic_profile_id = None
        self.discriminator = None

        if fqdn is not None:
            self.fqdn = fqdn
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if insecure is not None:
            self.insecure = insecure
        if ca_bundle is not None:
            self.ca_bundle = ca_bundle
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if storage_domain_id is not None:
            self.storage_domain_id = storage_domain_id
        if network_name is not None:
            self.network_name = network_name
        if vnic_profile_id is not None:
            self.vnic_profile_id = vnic_profile_id

    @property
    def fqdn(self):
        """Gets the fqdn of this OvirtPlatform.  # noqa: E501

        The oVirt's engine fully qualified domain name.  # noqa: E501

        :return: The fqdn of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this OvirtPlatform.

        The oVirt's engine fully qualified domain name.  # noqa: E501

        :param fqdn: The fqdn of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def username(self):
        """Gets the username of this OvirtPlatform.  # noqa: E501

        The user name to use to connect to the oVirt instance.  # noqa: E501

        :return: The username of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OvirtPlatform.

        The user name to use to connect to the oVirt instance.  # noqa: E501

        :param username: The username of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this OvirtPlatform.  # noqa: E501

        The password for the oVirt user name.  # noqa: E501

        :return: The password of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OvirtPlatform.

        The password for the oVirt user name.  # noqa: E501

        :param password: The password of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def insecure(self):
        """Gets the insecure of this OvirtPlatform.  # noqa: E501

        Verify oVirt engine certificate.  # noqa: E501

        :return: The insecure of this OvirtPlatform.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this OvirtPlatform.

        Verify oVirt engine certificate.  # noqa: E501

        :param insecure: The insecure of this OvirtPlatform.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    @property
    def ca_bundle(self):
        """Gets the ca_bundle of this OvirtPlatform.  # noqa: E501

        The CA Bundle of the oVirt's engine certificate.  # noqa: E501

        :return: The ca_bundle of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._ca_bundle

    @ca_bundle.setter
    def ca_bundle(self, ca_bundle):
        """Sets the ca_bundle of this OvirtPlatform.

        The CA Bundle of the oVirt's engine certificate.  # noqa: E501

        :param ca_bundle: The ca_bundle of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._ca_bundle = ca_bundle

    @property
    def cluster_id(self):
        """Gets the cluster_id of this OvirtPlatform.  # noqa: E501

        The oVirt cluster ID.  # noqa: E501

        :return: The cluster_id of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this OvirtPlatform.

        The oVirt cluster ID.  # noqa: E501

        :param cluster_id: The cluster_id of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def storage_domain_id(self):
        """Gets the storage_domain_id of this OvirtPlatform.  # noqa: E501

        The oVirt storage domain ID.  # noqa: E501

        :return: The storage_domain_id of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._storage_domain_id

    @storage_domain_id.setter
    def storage_domain_id(self, storage_domain_id):
        """Sets the storage_domain_id of this OvirtPlatform.

        The oVirt storage domain ID.  # noqa: E501

        :param storage_domain_id: The storage_domain_id of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._storage_domain_id = storage_domain_id

    @property
    def network_name(self):
        """Gets the network_name of this OvirtPlatform.  # noqa: E501

        The oVirt network the VMs will be attached to.  # noqa: E501

        :return: The network_name of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this OvirtPlatform.

        The oVirt network the VMs will be attached to.  # noqa: E501

        :param network_name: The network_name of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._network_name = network_name

    @property
    def vnic_profile_id(self):
        """Gets the vnic_profile_id of this OvirtPlatform.  # noqa: E501

        The oVirt VNIC profile ID.  # noqa: E501

        :return: The vnic_profile_id of this OvirtPlatform.  # noqa: E501
        :rtype: str
        """
        return self._vnic_profile_id

    @vnic_profile_id.setter
    def vnic_profile_id(self, vnic_profile_id):
        """Sets the vnic_profile_id of this OvirtPlatform.

        The oVirt VNIC profile ID.  # noqa: E501

        :param vnic_profile_id: The vnic_profile_id of this OvirtPlatform.  # noqa: E501
        :type: str
        """

        self._vnic_profile_id = vnic_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OvirtPlatform, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OvirtPlatform):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
