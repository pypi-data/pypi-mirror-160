Metadata-Version: 2.1
Name: mosaik.Schedule-Flocker
Version: 0.1.0rc20220721000438
Summary: Generate flocks of schedules from parameters.
Home-page: https://gitlab.com/offis.energy/mosaik/mosaik.schedule-flocker
Author: Bengt Lüers
Author-email: bengt.lueers@gmail.com
Maintainer: Bengt Lüers
Maintainer-email: bengt.lueers@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
Requires-Dist: mosaik.API-SemVer (>=2.4.2rc20190716091443)
Requires-Dist: mosaik.Core-SemVer (>=2.5.2rc20190715231038)
Requires-Dist: pip (>=20.3)
Requires-Dist: setuptools (>=40.8.0)
Requires-Dist: wheel (>=0.33.1)

# mosaik.Schedule-Flocker

Create flocks of schedules for electricity units described by a set of
parameters. These  example schedules can capture the flexibility of a 
model electricity unit.

## Status

[![pipeline status](https://gitlab.com/offis.energy/mosaik/mosaik.schedule-flocker/badges/master/pipeline.svg)](https://gitlab.com/offis.energy/mosaik/mosaik.schedule-flocker/pipelines)
[![coverage report](https://gitlab.com/offis.energy/mosaik/mosaik.schedule-flocker/badges/master/coverage.svg)](https://gitlab.com/offis.energy/mosaik/mosaik.schedule-flocker/-/jobs)

## Maturity

This simulator was developed for the Designetz project, but never used there.

##  Compatibility

This mosaik component uses the stack of SemVer forks instead of the upstream 
versions of SimPy, mosaik, and its API components.

##  Installing system-level prerequisites

-   Python >= 3.7

##  Creating the virtual environment

    python3.8 -m venv venv

##  Installing venv-level requirements

    venv/bin/python -m pip install -r requirements.d/venv.txt

##  Setting up the runtime environment

    venv/bin/python -m tox -e py38 --notest

##  Executing the tests

    venv/bin/python -m tox -e py38

##  Upgrading the requirements

    venv/bin/python -m pur -r requirements.d/venv.txt

    venv/bin/python -m pur -r requirements.d/base.txt

## Freezing the requirements

    venv/bin/python -m pip freeze --all --exclude-editable | \
        grep -v "pkg-resources" > requirements.d/venv.txt

    .tox/py38/bin/python -m pip freeze --all --exclude-editable | \
        grep -v "pkg-resources" > requirements.d/base.txt


