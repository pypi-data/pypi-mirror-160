Metadata-Version: 2.1
Name: pywannamaker
Version: 0.0.2
Summary: A parser for I Wanna Maker maps
Project-URL: Homepage, https://github.com/iwVerve/pywm
Project-URL: Bug Tracker, https://github.com/iwVerve/pywm/issues
Author-email: iwVerve <thedolphiner@gmail.com>
License: MIT License
        
        Copyright (c) 2022 iwVerve
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.7
Description-Content-Type: text/markdown

# pywannamaker
A python package for parsing and serializing I Wanna Maker maps from and back to their XML format.

## Usage
Importing the `pywm` module imports all required submodules.

### Opening maps
Several functions load and parse a map.

- `pywm.parseFile` does so from a file object or file path.
- `pywm.parseLocal` opens a map with the provided name in the actual game maps folder (specified in config.py).
- `pywm.parseString` opens a map from the provided string.

Worth noting is that each of these functions can correctly open any non-param element, meaning you can e.g. store individual objects in files.

### Saving
- `Map.serialize` returns the map string.
- `Map.save` saves the map to the provided file path.
- `Map.saveLocal` saves the name in the game maps folder with the provided name

### Object structure
- `Map`
    - `properties: Properties`
    - `objects: [Object]`
- `Properties`
    - `name: str`
    - `version: str`
    - `tileset: str`
    - `tileset2: str`
    - `bg: str`
    - `spikes: str`
    - `spikes2: str`
    - `width: str`
    - `height: str`
    - `colors: str`
    - `scroll_mode: str`
    - `music: str`
- `Object`
    - `type: int`
    - `x: int`
    - `y: int`
    - `sprite_angle: int`
    - `params: dict[str, str]`
    - `events: [Event]`
    - `children: [Object]`
    - `linked: [Object]`
- `Event`
    - `event_index: int`
    - `params: dict[str, str]`
    - `events: [Event]`

### Examples
```
m = pywm.Map()
m.saveLocal('empty.map')
```
Creates a new map and saves it.

```
m = pywm.parseLocal('input.map')
for o in m.objects:
    o.x = float(m.properties.width) - o.x
```
Mirrors a level horizontally

```
from pywm import Object, Event, ObjectType, EventType, ActionType
cannon = Object(ObjectType.CANNON, 400, 304)
onmetronome = Event(EventType.ONMETRONOMETICK)
onmetronome.params['frames'] = 25
onmetronome.events.append(Event(ActionType.FIRECANNON))
cannon.events.append(onmetronome)
```
Creates a new cannon object, and gives it an On metronome -> Fire event.