"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import intentionet.bfe.proto.datamodel.device_pb2
import intentionet.bfe.proto.datamodel.ip_primitives_pb2
import intentionet.bfe.proto.datamodel.range_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class AristaMlagAnalyzerAssertionInput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___AristaMlagAnalyzerAssertionInput = AristaMlagAnalyzerAssertionInput

class AristaMlagAnalyzerAssertionResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Violator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MLAG_DOMAIN_ID_FIELD_NUMBER: builtins.int
        DESCRIPTION_FIELD_NUMBER: builtins.int
        VIOLATION_FIELD_NUMBER: builtins.int
        mlag_domain_id: typing.Text
        description: typing.Text
        @property
        def violation(self) -> global___AristaMlagAnalyzerAssertionResult.Violation: ...
        def __init__(self,
            *,
            mlag_domain_id: typing.Text = ...,
            description: typing.Text = ...,
            violation: typing.Optional[global___AristaMlagAnalyzerAssertionResult.Violation] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["violation",b"violation"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["description",b"description","mlag_domain_id",b"mlag_domain_id","violation",b"violation"]) -> None: ...

    class Conformer(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MLAG_DOMAIN_ID_FIELD_NUMBER: builtins.int
        DEVICE1_FIELD_NUMBER: builtins.int
        DEVICE2_FIELD_NUMBER: builtins.int
        mlag_domain_id: typing.Text
        @property
        def device1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def device2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            mlag_domain_id: typing.Text = ...,
            device1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            device2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device1",b"device1","device2",b"device2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device1",b"device1","device2",b"device2","mlag_domain_id",b"mlag_domain_id"]) -> None: ...

    class Violation(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MORE_THAN_TWO_DEVICES_FIELD_NUMBER: builtins.int
        NO_REMOTE_DEVICE_FIELD_NUMBER: builtins.int
        PAIRED_DEVICES_VIOLATION_FIELD_NUMBER: builtins.int
        @property
        def more_than_two_devices(self) -> global___AristaMlagAnalyzerAssertionResult.MoreThanTwoDevices: ...
        @property
        def no_remote_device(self) -> global___AristaMlagAnalyzerAssertionResult.NoRemoteDevice: ...
        @property
        def paired_devices_violation(self) -> global___AristaMlagAnalyzerAssertionResult.PairedDevicesViolation: ...
        def __init__(self,
            *,
            more_than_two_devices: typing.Optional[global___AristaMlagAnalyzerAssertionResult.MoreThanTwoDevices] = ...,
            no_remote_device: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoRemoteDevice] = ...,
            paired_devices_violation: typing.Optional[global___AristaMlagAnalyzerAssertionResult.PairedDevicesViolation] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["expr",b"expr","more_than_two_devices",b"more_than_two_devices","no_remote_device",b"no_remote_device","paired_devices_violation",b"paired_devices_violation"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["expr",b"expr","more_than_two_devices",b"more_than_two_devices","no_remote_device",b"no_remote_device","paired_devices_violation",b"paired_devices_violation"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["expr",b"expr"]) -> typing.Optional[typing_extensions.Literal["more_than_two_devices","no_remote_device","paired_devices_violation"]]: ...

    class PairedDevicesViolation(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE1_FIELD_NUMBER: builtins.int
        DEVICE2_FIELD_NUMBER: builtins.int
        PROBLEMS_FIELD_NUMBER: builtins.int
        @property
        def device1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def device2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def problems(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AristaMlagAnalyzerAssertionResult.Problem]: ...
        def __init__(self,
            *,
            device1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            device2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            problems: typing.Optional[typing.Iterable[global___AristaMlagAnalyzerAssertionResult.Problem]] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device1",b"device1","device2",b"device2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device1",b"device1","device2",b"device2","problems",b"problems"]) -> None: ...

    class Problem(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        NO_PEER_ADDRESS_FIELD_NUMBER: builtins.int
        NO_PEER_INTERFACE_CONFIGURED_FIELD_NUMBER: builtins.int
        NO_PEER_INTERFACE_EXISTS_FIELD_NUMBER: builtins.int
        NO_LOCAL_INTERFACE_EXISTS_FIELD_NUMBER: builtins.int
        NO_LOCAL_IP_ADDRESS_FIELD_NUMBER: builtins.int
        IP_ADDRESS_MISMATCH_FIELD_NUMBER: builtins.int
        SWITCHPORT_MODE_MISMATCH_FIELD_NUMBER: builtins.int
        ALLOWED_VLANS_MISMATCH_FIELD_NUMBER: builtins.int
        NATIVE_VLAN_MISMATCH_FIELD_NUMBER: builtins.int
        ACCESS_VLAN_MISMATCH_FIELD_NUMBER: builtins.int
        MLAG_IDS_MISMATCH_FIELD_NUMBER: builtins.int
        PEER_LINK_IS_NOT_PORT_CHANNEL_FIELD_NUMBER: builtins.int
        NO_LOCAL_INTERFACE_CONFIGURED_FIELD_NUMBER: builtins.int
        @property
        def no_peer_address(self) -> global___AristaMlagAnalyzerAssertionResult.NoPeerAddress: ...
        @property
        def no_peer_interface_configured(self) -> global___AristaMlagAnalyzerAssertionResult.NoPeerInterfaceConfigured: ...
        @property
        def no_peer_interface_exists(self) -> global___AristaMlagAnalyzerAssertionResult.NoPeerInterfaceExists: ...
        @property
        def no_local_interface_exists(self) -> global___AristaMlagAnalyzerAssertionResult.NoLocalInterfaceExists: ...
        @property
        def no_local_ip_address(self) -> global___AristaMlagAnalyzerAssertionResult.NoLocalIpAddress: ...
        @property
        def ip_address_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.IpAddressMismatch: ...
        @property
        def switchport_mode_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.SwitchportModeMismatch: ...
        @property
        def allowed_vlans_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.AllowedVlansMismatch: ...
        @property
        def native_vlan_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.NativeVlanMismatch: ...
        @property
        def access_vlan_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.AccessVlanMismatch: ...
        @property
        def mlag_ids_mismatch(self) -> global___AristaMlagAnalyzerAssertionResult.MlagIdsMismatch: ...
        @property
        def peer_link_is_not_port_channel(self) -> global___AristaMlagAnalyzerAssertionResult.PeerLinkIsNotPortChannel: ...
        @property
        def no_local_interface_configured(self) -> global___AristaMlagAnalyzerAssertionResult.NoLocalInterfaceConfigured: ...
        def __init__(self,
            *,
            no_peer_address: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoPeerAddress] = ...,
            no_peer_interface_configured: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoPeerInterfaceConfigured] = ...,
            no_peer_interface_exists: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoPeerInterfaceExists] = ...,
            no_local_interface_exists: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoLocalInterfaceExists] = ...,
            no_local_ip_address: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoLocalIpAddress] = ...,
            ip_address_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.IpAddressMismatch] = ...,
            switchport_mode_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.SwitchportModeMismatch] = ...,
            allowed_vlans_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.AllowedVlansMismatch] = ...,
            native_vlan_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NativeVlanMismatch] = ...,
            access_vlan_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.AccessVlanMismatch] = ...,
            mlag_ids_mismatch: typing.Optional[global___AristaMlagAnalyzerAssertionResult.MlagIdsMismatch] = ...,
            peer_link_is_not_port_channel: typing.Optional[global___AristaMlagAnalyzerAssertionResult.PeerLinkIsNotPortChannel] = ...,
            no_local_interface_configured: typing.Optional[global___AristaMlagAnalyzerAssertionResult.NoLocalInterfaceConfigured] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["access_vlan_mismatch",b"access_vlan_mismatch","allowed_vlans_mismatch",b"allowed_vlans_mismatch","expr",b"expr","ip_address_mismatch",b"ip_address_mismatch","mlag_ids_mismatch",b"mlag_ids_mismatch","native_vlan_mismatch",b"native_vlan_mismatch","no_local_interface_configured",b"no_local_interface_configured","no_local_interface_exists",b"no_local_interface_exists","no_local_ip_address",b"no_local_ip_address","no_peer_address",b"no_peer_address","no_peer_interface_configured",b"no_peer_interface_configured","no_peer_interface_exists",b"no_peer_interface_exists","peer_link_is_not_port_channel",b"peer_link_is_not_port_channel","switchport_mode_mismatch",b"switchport_mode_mismatch"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["access_vlan_mismatch",b"access_vlan_mismatch","allowed_vlans_mismatch",b"allowed_vlans_mismatch","expr",b"expr","ip_address_mismatch",b"ip_address_mismatch","mlag_ids_mismatch",b"mlag_ids_mismatch","native_vlan_mismatch",b"native_vlan_mismatch","no_local_interface_configured",b"no_local_interface_configured","no_local_interface_exists",b"no_local_interface_exists","no_local_ip_address",b"no_local_ip_address","no_peer_address",b"no_peer_address","no_peer_interface_configured",b"no_peer_interface_configured","no_peer_interface_exists",b"no_peer_interface_exists","peer_link_is_not_port_channel",b"peer_link_is_not_port_channel","switchport_mode_mismatch",b"switchport_mode_mismatch"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["expr",b"expr"]) -> typing.Optional[typing_extensions.Literal["no_peer_address","no_peer_interface_configured","no_peer_interface_exists","no_local_interface_exists","no_local_ip_address","ip_address_mismatch","switchport_mode_mismatch","allowed_vlans_mismatch","native_vlan_mismatch","access_vlan_mismatch","mlag_ids_mismatch","peer_link_is_not_port_channel","no_local_interface_configured"]]: ...

    class MoreThanTwoDevices(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICES_FIELD_NUMBER: builtins.int
        @property
        def devices(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intentionet.bfe.proto.datamodel.device_pb2.Device]: ...
        def __init__(self,
            *,
            devices: typing.Optional[typing.Iterable[intentionet.bfe.proto.datamodel.device_pb2.Device]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["devices",b"devices"]) -> None: ...

    class NoRemoteDevice(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device"]) -> None: ...

    class NoPeerAddress(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device"]) -> None: ...

    class NoPeerInterfaceConfigured(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device"]) -> None: ...

    class NoPeerInterfaceExists(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        PEER_INTERFACE_NAME_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        peer_interface_name: typing.Text
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            peer_interface_name: typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","peer_interface_name",b"peer_interface_name"]) -> None: ...

    class NoLocalInterfaceExists(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        LOCAL_INTERFACE_NAME_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        local_interface_name: typing.Text
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            local_interface_name: typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","local_interface_name",b"local_interface_name"]) -> None: ...

    class NoLocalIpAddress(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device"]) -> None: ...

    class IpAddressMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        LOCAL_DEVICE_FIELD_NUMBER: builtins.int
        LOCAL_IP_ADDRESS_FIELD_NUMBER: builtins.int
        REMOTE_DEVICE_FIELD_NUMBER: builtins.int
        REMOTE_PEER_ADDRESS_FIELD_NUMBER: builtins.int
        @property
        def local_device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def local_ip_address(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip: ...
        @property
        def remote_device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def remote_peer_address(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip: ...
        def __init__(self,
            *,
            local_device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            local_ip_address: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip] = ...,
            remote_device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            remote_peer_address: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["local_device",b"local_device","local_ip_address",b"local_ip_address","remote_device",b"remote_device","remote_peer_address",b"remote_peer_address"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["local_device",b"local_device","local_ip_address",b"local_ip_address","remote_device",b"remote_device","remote_peer_address",b"remote_peer_address"]) -> None: ...

    class SwitchportModeMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        INTERFACE1_FIELD_NUMBER: builtins.int
        SWITCHPORT_MODE1_FIELD_NUMBER: builtins.int
        INTERFACE2_FIELD_NUMBER: builtins.int
        SWITCHPORT_MODE2_FIELD_NUMBER: builtins.int
        @property
        def interface1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        switchport_mode1: intentionet.bfe.proto.datamodel.device_pb2.SwitchportMode.ValueType
        @property
        def interface2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        switchport_mode2: intentionet.bfe.proto.datamodel.device_pb2.SwitchportMode.ValueType
        def __init__(self,
            *,
            interface1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            switchport_mode1: intentionet.bfe.proto.datamodel.device_pb2.SwitchportMode.ValueType = ...,
            interface2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            switchport_mode2: intentionet.bfe.proto.datamodel.device_pb2.SwitchportMode.ValueType = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2","switchport_mode1",b"switchport_mode1","switchport_mode2",b"switchport_mode2"]) -> None: ...

    class AllowedVlansMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        INTERFACE1_FIELD_NUMBER: builtins.int
        INTERFACE2_FIELD_NUMBER: builtins.int
        COMMON_VLANS_FIELD_NUMBER: builtins.int
        EXTRA_VLANS1_FIELD_NUMBER: builtins.int
        EXTRA_VLANS2_FIELD_NUMBER: builtins.int
        @property
        def interface1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        @property
        def interface2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        @property
        def common_vlans(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intentionet.bfe.proto.datamodel.range_pb2.IntRange]: ...
        @property
        def extra_vlans1(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intentionet.bfe.proto.datamodel.range_pb2.IntRange]: ...
        @property
        def extra_vlans2(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intentionet.bfe.proto.datamodel.range_pb2.IntRange]: ...
        def __init__(self,
            *,
            interface1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            interface2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            common_vlans: typing.Optional[typing.Iterable[intentionet.bfe.proto.datamodel.range_pb2.IntRange]] = ...,
            extra_vlans1: typing.Optional[typing.Iterable[intentionet.bfe.proto.datamodel.range_pb2.IntRange]] = ...,
            extra_vlans2: typing.Optional[typing.Iterable[intentionet.bfe.proto.datamodel.range_pb2.IntRange]] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["common_vlans",b"common_vlans","extra_vlans1",b"extra_vlans1","extra_vlans2",b"extra_vlans2","interface1",b"interface1","interface2",b"interface2"]) -> None: ...

    class NativeVlanMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        INTERFACE1_FIELD_NUMBER: builtins.int
        NATIVE_VLAN1_FIELD_NUMBER: builtins.int
        INTERFACE2_FIELD_NUMBER: builtins.int
        NATIVE_VLAN2_FIELD_NUMBER: builtins.int
        @property
        def interface1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        native_vlan1: builtins.int
        @property
        def interface2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        native_vlan2: builtins.int
        def __init__(self,
            *,
            interface1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            native_vlan1: builtins.int = ...,
            interface2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            native_vlan2: builtins.int = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2","native_vlan1",b"native_vlan1","native_vlan2",b"native_vlan2"]) -> None: ...

    class AccessVlanMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        INTERFACE1_FIELD_NUMBER: builtins.int
        ACCESS_VLAN1_FIELD_NUMBER: builtins.int
        INTERFACE2_FIELD_NUMBER: builtins.int
        ACCESS_VLAN2_FIELD_NUMBER: builtins.int
        @property
        def interface1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        access_vlan1: builtins.int
        @property
        def interface2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        access_vlan2: builtins.int
        def __init__(self,
            *,
            interface1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            access_vlan1: builtins.int = ...,
            interface2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            access_vlan2: builtins.int = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interface1",b"interface1","interface2",b"interface2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["access_vlan1",b"access_vlan1","access_vlan2",b"access_vlan2","interface1",b"interface1","interface2",b"interface2"]) -> None: ...

    class MlagIdsMismatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE1_FIELD_NUMBER: builtins.int
        DEVICE2_FIELD_NUMBER: builtins.int
        COMMON_IDS_FIELD_NUMBER: builtins.int
        EXTRA_MLAG_IDS1_FIELD_NUMBER: builtins.int
        EXTRA_MLAG_IDS2_FIELD_NUMBER: builtins.int
        @property
        def device1(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def device2(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def common_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        @property
        def extra_mlag_ids1(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        @property
        def extra_mlag_ids2(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
        def __init__(self,
            *,
            device1: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            device2: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            common_ids: typing.Optional[typing.Iterable[builtins.int]] = ...,
            extra_mlag_ids1: typing.Optional[typing.Iterable[builtins.int]] = ...,
            extra_mlag_ids2: typing.Optional[typing.Iterable[builtins.int]] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device1",b"device1","device2",b"device2"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["common_ids",b"common_ids","device1",b"device1","device2",b"device2","extra_mlag_ids1",b"extra_mlag_ids1","extra_mlag_ids2",b"extra_mlag_ids2"]) -> None: ...

    class PeerLinkIsNotPortChannel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        INTERFACE_FIELD_NUMBER: builtins.int
        @property
        def interface(self) -> intentionet.bfe.proto.datamodel.device_pb2.Interface: ...
        def __init__(self,
            *,
            interface: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Interface] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["interface",b"interface"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["interface",b"interface"]) -> None: ...

    class NoLocalInterfaceConfigured(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device"]) -> None: ...

    VIOLATORS_FIELD_NUMBER: builtins.int
    CONFORMERS_FIELD_NUMBER: builtins.int
    @property
    def violators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AristaMlagAnalyzerAssertionResult.Violator]: ...
    @property
    def conformers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___AristaMlagAnalyzerAssertionResult.Conformer]: ...
    def __init__(self,
        *,
        violators: typing.Optional[typing.Iterable[global___AristaMlagAnalyzerAssertionResult.Violator]] = ...,
        conformers: typing.Optional[typing.Iterable[global___AristaMlagAnalyzerAssertionResult.Conformer]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["conformers",b"conformers","violators",b"violators"]) -> None: ...
global___AristaMlagAnalyzerAssertionResult = AristaMlagAnalyzerAssertionResult
