# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: intentionet/bfe/proto/assertions/core.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from intentionet.bfe.proto.assertions import parameters_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_parameters__pb2
from intentionet.bfe.proto.assertions import bgp_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_bgp__pb2
from intentionet.bfe.proto.assertions import filters_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_filters__pb2
from intentionet.bfe.proto.assertions import isis_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_isis__pb2
from intentionet.bfe.proto.assertions import mlag_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_mlag__pb2
from intentionet.bfe.proto.assertions import ospf_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_ospf__pb2
from intentionet.bfe.proto.assertions import snmp_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_snmp__pb2
from intentionet.bfe.proto.assertions import reachability_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_reachability__pb2
from intentionet.bfe.proto.assertions import reference_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_reference__pb2
from intentionet.bfe.proto.assertions import route_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_route__pb2
from intentionet.bfe.proto.assertions import text_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_text__pb2
from intentionet.bfe.proto.assertions import traceroute_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_traceroute__pb2
from intentionet.bfe.proto.assertions import violations_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_violations__pb2
from intentionet.bfe.proto.datamodel.aws import aws_primitives_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_aws_dot_aws__primitives__pb2
from intentionet.bfe.proto.datamodel import bgp_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_bgp__pb2
from intentionet.bfe.proto.datamodel import device_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_device__pb2
from intentionet.bfe.proto.datamodel import flow_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_flow__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+intentionet/bfe/proto/assertions/core.proto\x12\x1e\x63om.intentionet.bfe.assertions\x1a\x31intentionet/bfe/proto/assertions/parameters.proto\x1a*intentionet/bfe/proto/assertions/bgp.proto\x1a.intentionet/bfe/proto/assertions/filters.proto\x1a+intentionet/bfe/proto/assertions/isis.proto\x1a+intentionet/bfe/proto/assertions/mlag.proto\x1a+intentionet/bfe/proto/assertions/ospf.proto\x1a+intentionet/bfe/proto/assertions/snmp.proto\x1a\x33intentionet/bfe/proto/assertions/reachability.proto\x1a\x30intentionet/bfe/proto/assertions/reference.proto\x1a,intentionet/bfe/proto/assertions/route.proto\x1a+intentionet/bfe/proto/assertions/text.proto\x1a\x31intentionet/bfe/proto/assertions/traceroute.proto\x1a\x31intentionet/bfe/proto/assertions/violations.proto\x1a\x38intentionet/bfe/proto/datamodel/aws/aws_primitives.proto\x1a)intentionet/bfe/proto/datamodel/bgp.proto\x1a,intentionet/bfe/proto/datamodel/device.proto\x1a*intentionet/bfe/proto/datamodel/flow.proto\"\xcf\x19\n\x0e\x41ssertionInput\x12t\n\x14\x64\x65vices_have_servers\x18\x01 \x01(\x0b\x32@.com.intentionet.bfe.assertions.DevicesHaveServersAssertionInputH\x00R\x12\x64\x65vicesHaveServers\x12\x95\x01\n!security_group_does_not_have_rule\x18\x10 \x01(\x0b\x32J.com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionInputH\x00R\x1csecurityGroupDoesNotHaveRule\x12s\n\x18sg_rules_blocked_by_nacl\x18\x11 \x01(\x0b\x32\x39.com.intentionet.bfe.assertions.SgRulesBlockedByNaclInputH\x00R\x14sgRulesBlockedByNacl\x12\x91\x01\n\x1f\x63ross_zone_policy_filters_flows\x18\x12 \x01(\x0b\x32I.com.intentionet.bfe.assertions.CrossZonePolicyFiltersFlowsAssertionInputH\x00R\x1b\x63rossZonePolicyFiltersFlows\x12q\n\x13\x64\x65vices_have_routes\x18\x13 \x01(\x0b\x32?.com.intentionet.bfe.assertions.DevicesHaveRoutesAssertionInputH\x00R\x11\x64\x65vicesHaveRoutes\x12\x66\n\x13vpc_endpoint_for_s3\x18\x14 \x01(\x0b\x32\x35.com.intentionet.bfe.assertions.VpcEndpointForS3InputH\x00R\x10vpcEndpointForS3\x12\x61\n\x10public_instances\x18\x15 \x01(\x0b\x32\x34.com.intentionet.bfe.assertions.PublicInstancesInputH\x00R\x0fpublicInstances\x12\x86\x01\n\x1fpublic_ip_not_in_private_subnet\x18\x16 \x01(\x0b\x32?.com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetInputH\x00R\x1apublicIpNotInPrivateSubnet\x12v\n\x19lb_targets_with_public_ip\x18\x17 \x01(\x0b\x32:.com.intentionet.bfe.assertions.LbTargetsWithPublicIpInputH\x00R\x15lbTargetsWithPublicIp\x12^\n\x0fstepping_stones\x18\x18 \x01(\x0b\x32\x33.com.intentionet.bfe.assertions.SteppingStonesInputH\x00R\x0esteppingStones\x12z\n\x16snmp_community_clients\x18\x19 \x01(\x0b\x32\x42.com.intentionet.bfe.assertions.SnmpCommunityClientsAssertionInputH\x00R\x14snmpCommunityClients\x12u\n\x15passive_bgp_no_subnet\x18\x1a \x01(\x0b\x32@.com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionInputH\x00R\x12passiveBgpNoSubnet\x12g\n\x0f\x66ilter_behavior\x18\x1b \x01(\x0b\x32<.com.intentionet.bfe.assertions.FilterBehaviorAssertionInputH\x00R\x0e\x66ilterBehavior\x12s\n\x13undefined_reference\x18\x1c \x01(\x0b\x32@.com.intentionet.bfe.assertions.UndefinedReferenceAssertionInputH\x00R\x12undefinedReference\x12\x83\x01\n\x19\x62gp_session_establishment\x18\x1d \x01(\x0b\x32\x45.com.intentionet.bfe.assertions.BgpSessionEstablishmentAssertionInputH\x00R\x17\x62gpSessionEstablishment\x12t\n\x14\x61rista_mlag_analyzer\x18\x1e \x01(\x0b\x32@.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionInputH\x00R\x12\x61ristaMlagAnalyzer\x12\x83\x01\n\x19\x62gp_peering_establishment\x18\x1f \x01(\x0b\x32\x45.com.intentionet.bfe.assertions.BgpPeeringEstablishmentAssertionInputH\x00R\x17\x62gpPeeringEstablishment\x12\x80\x01\n\x18\x66ilter_line_reachability\x18  \x01(\x0b\x32\x44.com.intentionet.bfe.assertions.FilterLineReachabilityAssertionInputH\x00R\x16\x66ilterLineReachability\x12y\n\x15service_accessibility\x18* \x01(\x0b\x32\x42.com.intentionet.bfe.assertions.ServiceAccessibilityAssertionInputH\x00R\x14serviceAccessibility\x12p\n\x12service_protection\x18+ \x01(\x0b\x32?.com.intentionet.bfe.assertions.ServiceProtectionAssertionInputH\x00R\x11serviceProtection\x12k\n\x11\x64uplicate_bgp_asn\x18, \x01(\x0b\x32=.com.intentionet.bfe.assertions.DuplicateBgpAsnAssertionInputH\x00R\x0f\x64uplicateBgpAsn\x12{\n\x17\x64uplicate_bgp_router_id\x18- \x01(\x0b\x32\x42.com.intentionet.bfe.assertions.DuplicateBgpRouterIdAssertionInputH\x00R\x14\x64uplicateBgpRouterId\x12~\n\x18\x64uplicate_ospf_router_id\x18. \x01(\x0b\x32\x43.com.intentionet.bfe.assertions.DuplicateOspfRouterIdAssertionInputH\x00R\x15\x64uplicateOspfRouterId\x12U\n\tisis_cost\x18/ \x01(\x0b\x32\x36.com.intentionet.bfe.assertions.IsisCostAssertionInputH\x00R\x08isisCost\x12\x81\x01\n\x1c\x64\x65vices_have_definition_text\x18\x32 \x01(\x0b\x32>.com.intentionet.bfe.assertions.DevicesHaveDefinitionTextInputH\x00R\x19\x64\x65vicesHaveDefinitionText\x12\x62\n\x11\x64\x65vices_have_text\x18\x33 \x01(\x0b\x32\x34.com.intentionet.bfe.assertions.DevicesHaveTextInputH\x00R\x0f\x64\x65vicesHaveText\x12Z\n\ntraceroute\x18\x34 \x01(\x0b\x32\x38.com.intentionet.bfe.assertions.TracerouteAssertionInputH\x00R\ntraceroute\x12 \n\x0b\x64\x65scription\x18\x03 \x01(\tR\x0b\x64\x65scription\x12\x14\n\x05title\x18\x04 \x01(\tR\x05titleB\x07\n\x05input\"0\n\x1aParseAssertionInputRequest\x12\x12\n\x04text\x18\x01 \x01(\tR\x04text\"k\n\x1bParseAssertionInputResponse\x12L\n\tassertion\x18\x01 \x01(\x0b\x32..com.intentionet.bfe.assertions.AssertionInputR\tassertion\"\x89\x1a\n\x0f\x41ssertionResult\x12u\n\x14\x64\x65vices_have_servers\x18\x01 \x01(\x0b\x32\x41.com.intentionet.bfe.assertions.DevicesHaveServersAssertionResultH\x00R\x12\x64\x65vicesHaveServers\x12\x96\x01\n!security_group_does_not_have_rule\x18\x10 \x01(\x0b\x32K.com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionResultH\x00R\x1csecurityGroupDoesNotHaveRule\x12t\n\x18sg_rules_blocked_by_nacl\x18\x11 \x01(\x0b\x32:.com.intentionet.bfe.assertions.SgRulesBlockedByNaclResultH\x00R\x14sgRulesBlockedByNacl\x12\x92\x01\n\x1f\x63ross_zone_policy_filters_flows\x18\x12 \x01(\x0b\x32J.com.intentionet.bfe.assertions.CrossZonePolicyFiltersFlowsAssertionResultH\x00R\x1b\x63rossZonePolicyFiltersFlows\x12r\n\x13\x64\x65vices_have_routes\x18\x13 \x01(\x0b\x32@.com.intentionet.bfe.assertions.DevicesHaveRoutesAssertionResultH\x00R\x11\x64\x65vicesHaveRoutes\x12g\n\x13vpc_endpoint_for_s3\x18\x14 \x01(\x0b\x32\x36.com.intentionet.bfe.assertions.VpcEndpointForS3ResultH\x00R\x10vpcEndpointForS3\x12\x62\n\x10public_instances\x18\x15 \x01(\x0b\x32\x35.com.intentionet.bfe.assertions.PublicInstancesResultH\x00R\x0fpublicInstances\x12\x87\x01\n\x1fpublic_ip_not_in_private_subnet\x18\x16 \x01(\x0b\x32@.com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetResultH\x00R\x1apublicIpNotInPrivateSubnet\x12w\n\x19lb_targets_with_public_ip\x18\x17 \x01(\x0b\x32;.com.intentionet.bfe.assertions.LbTargetsWithPublicIpResultH\x00R\x15lbTargetsWithPublicIp\x12_\n\x0fstepping_stones\x18\x18 \x01(\x0b\x32\x34.com.intentionet.bfe.assertions.SteppingStonesResultH\x00R\x0esteppingStones\x12{\n\x16snmp_community_clients\x18\x19 \x01(\x0b\x32\x43.com.intentionet.bfe.assertions.SnmpCommunityClientsAssertionResultH\x00R\x14snmpCommunityClients\x12v\n\x15passive_bgp_no_subnet\x18\x1a \x01(\x0b\x32\x41.com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionResultH\x00R\x12passiveBgpNoSubnet\x12h\n\x0f\x66ilter_behavior\x18\x1b \x01(\x0b\x32=.com.intentionet.bfe.assertions.FilterBehaviorAssertionResultH\x00R\x0e\x66ilterBehavior\x12t\n\x13undefined_reference\x18\x1c \x01(\x0b\x32\x41.com.intentionet.bfe.assertions.UndefinedReferenceAssertionResultH\x00R\x12undefinedReference\x12\x84\x01\n\x19\x62gp_session_establishment\x18\x1d \x01(\x0b\x32\x46.com.intentionet.bfe.assertions.BgpSessionEstablishmentAssertionResultH\x00R\x17\x62gpSessionEstablishment\x12u\n\x14\x61rista_mlag_analyzer\x18\x1e \x01(\x0b\x32\x41.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResultH\x00R\x12\x61ristaMlagAnalyzer\x12\x84\x01\n\x19\x62gp_peering_establishment\x18\x1f \x01(\x0b\x32\x46.com.intentionet.bfe.assertions.BgpPeeringEstablishmentAssertionResultH\x00R\x17\x62gpPeeringEstablishment\x12\x81\x01\n\x18\x66ilter_line_reachability\x18  \x01(\x0b\x32\x45.com.intentionet.bfe.assertions.FilterLineReachabilityAssertionResultH\x00R\x16\x66ilterLineReachability\x12z\n\x15service_accessibility\x18* \x01(\x0b\x32\x43.com.intentionet.bfe.assertions.ServiceAccessibilityAssertionResultH\x00R\x14serviceAccessibility\x12q\n\x12service_protection\x18+ \x01(\x0b\x32@.com.intentionet.bfe.assertions.ServiceProtectionAssertionResultH\x00R\x11serviceProtection\x12l\n\x11\x64uplicate_bgp_asn\x18, \x01(\x0b\x32>.com.intentionet.bfe.assertions.DuplicateBgpAsnAssertionResultH\x00R\x0f\x64uplicateBgpAsn\x12|\n\x17\x64uplicate_bgp_router_id\x18- \x01(\x0b\x32\x43.com.intentionet.bfe.assertions.DuplicateBgpRouterIdAssertionResultH\x00R\x14\x64uplicateBgpRouterId\x12\x7f\n\x18\x64uplicate_ospf_router_id\x18. \x01(\x0b\x32\x44.com.intentionet.bfe.assertions.DuplicateOspfRouterIdAssertionResultH\x00R\x15\x64uplicateOspfRouterId\x12V\n\tisis_cost\x18/ \x01(\x0b\x32\x37.com.intentionet.bfe.assertions.IsisCostAssertionResultH\x00R\x08isisCost\x12\x82\x01\n\x1c\x64\x65vices_have_definition_text\x18\x32 \x01(\x0b\x32?.com.intentionet.bfe.assertions.DevicesHaveDefinitionTextResultH\x00R\x19\x64\x65vicesHaveDefinitionText\x12\x63\n\x11\x64\x65vices_have_text\x18\x33 \x01(\x0b\x32\x35.com.intentionet.bfe.assertions.DevicesHaveTextResultH\x00R\x0f\x64\x65vicesHaveText\x12[\n\ntraceroute\x18\x34 \x01(\x0b\x32\x39.com.intentionet.bfe.assertions.TracerouteAssertionResultH\x00R\ntraceroute\x12S\n\x08metadata\x18\x02 \x01(\x0b\x32\x37.com.intentionet.bfe.assertions.AssertionResultMetadataR\x08metadataB\x08\n\x06result\"\xcc\x02\n\x17\x41ssertionResultMetadata\x12G\n\x06status\x18\x01 \x01(\x0e\x32/.com.intentionet.bfe.assertions.AssertionStatusR\x06status\x12M\n\x05\x65rror\x18\x02 \x01(\x0b\x32\x37.com.intentionet.bfe.assertions.AssertionExecutionErrorR\x05\x65rror\x12\x44\n\x05stats\x18\x03 \x01(\x0b\x32..com.intentionet.bfe.assertions.AssertionStatsR\x05stats\x12S\n\x08warnings\x18\x04 \x01(\x0b\x32\x37.com.intentionet.bfe.assertions.AssertionResultWarningsR\x08warnings\"5\n\x17\x41ssertionResultWarnings\x12\x1a\n\x08warnings\x18\x01 \x03(\tR\x08warnings\"{\n\x17\x41ssertionExecutionError\x12\x46\n\x04\x63ode\x18\x01 \x01(\x0e\x32\x32.com.intentionet.bfe.assertions.AssertionErrorCodeR\x04\x63ode\x12\x18\n\x07message\x18\x02 \x01(\tR\x07message\"x\n\x0e\x41ssertionStats\x12\x12\n\x04pass\x18\x01 \x01(\rR\x04pass\x12\x12\n\x04\x66\x61il\x18\x02 \x01(\rR\x04\x66\x61il\x12\x12\n\x04skip\x18\x03 \x01(\rR\x04skip\x12\x14\n\x05\x65rror\x18\x04 \x01(\rR\x05\x65rror\x12\x14\n\x05total\x18\x05 \x01(\rR\x05total\"M\n\x15RemediationSuggestion\x12 \n\x0b\x64\x65scription\x18\x01 \x01(\tR\x0b\x64\x65scription\x12\x12\n\x04link\x18\x02 \x01(\tR\x04link\"\xb6\x01\n DevicesHaveServersAssertionInput\x12J\n\x07\x64\x65vices\x18\x01 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DeviceFilterExprR\x07\x64\x65vices\x12\x46\n\x07servers\x18\x02 \x01(\x0b\x32,.com.intentionet.bfe.assertions.MatchServersR\x07servers\"\xd1\x04\n!DevicesHaveServersAssertionResult\x12g\n\tviolators\x18\x01 \x03(\x0b\x32I.com.intentionet.bfe.assertions.DevicesHaveServersAssertionResult.ElementR\tviolators\x12\x37\n\x15violator_descriptions\x18\x02 \x03(\tB\x02\x18\x01R\x14violatorDescriptions\x12i\n\nconformers\x18\x03 \x03(\x0b\x32I.com.intentionet.bfe.assertions.DevicesHaveServersAssertionResult.ElementR\nconformers\x1a\x9e\x02\n\x07\x45lement\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x12\x1c\n\x07servers\x18\x02 \x03(\tB\x02\x18\x01R\x07servers\x12\x61\n\x11\x64\x65scription_index\x18\x03 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexB\x02\x18\x01R\x10\x64\x65scriptionIndex\x12W\n\x0cmatch_result\x18\x04 \x01(\x0b\x32\x34.com.intentionet.bfe.assertions.MatchStringSetResultR\x0bmatchResult\"\x8b\x01\n\x1fPublicIpNotInPrivateSubnetInput\x12h\n\x12network_interfaces\x18\x01 \x01(\x0b\x32\x39.com.intentionet.bfe.assertions.AwsNetworkInterfaceFilterR\x11networkInterfaces\"\x85\x05\n PublicIpNotInPrivateSubnetResult\x12g\n\tviolators\x18\x01 \x03(\x0b\x32I.com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetResult.ViolatorR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\xc2\x03\n\x08Violator\x12J\n\x06subnet\x18\x01 \x01(\x0b\x32\x32.com.intentionet.bfe.proto.datamodel.aws.AwsSubnetR\x06subnet\x12N\n\x03\x65ni\x18\x02 \x01(\x0b\x32<.com.intentionet.bfe.proto.datamodel.aws.AwsNetworkInterfaceR\x03\x65ni\x12P\n\x08instance\x18\x05 \x01(\x0b\x32\x34.com.intentionet.bfe.proto.datamodel.aws.AwsInstanceR\x08instance\x12Q\n\x08location\x18\x08 \x01(\x0b\x32\x35.com.intentionet.bfe.proto.datamodel.aws.AwsAccRegVpcR\x08location\x12]\n\x11\x64\x65scription_index\x18\t \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndexJ\x04\x08\x03\x10\x04J\x04\x08\x04\x10\x05J\x04\x08\x06\x10\x07J\x04\x08\x07\x10\x08\"m\n\x1aLbTargetsWithPublicIpInput\x12O\n\tinstances\x18\x01 \x01(\x0b\x32\x31.com.intentionet.bfe.assertions.AwsInstanceFilterR\tinstances\"\xcf\x05\n\x1bLbTargetsWithPublicIpResult\x12\x62\n\tviolators\x18\x01 \x03(\x0b\x32\x44.com.intentionet.bfe.assertions.LbTargetsWithPublicIpResult.ViolatorR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\x9e\x02\n\x08Violator\x12P\n\x08instance\x18\x01 \x01(\x0b\x32\x34.com.intentionet.bfe.proto.datamodel.aws.AwsInstanceR\x08instance\x12\x61\n\tlb_detail\x18\x02 \x03(\x0b\x32\x44.com.intentionet.bfe.assertions.LbTargetsWithPublicIpResult.LBDetailR\x08lbDetail\x12]\n\x11\x64\x65scription_index\x18\x03 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndex\x1a\xf5\x01\n\x08LBDetail\x12]\n\rload_balancer\x18\x01 \x01(\x0b\x32\x38.com.intentionet.bfe.proto.datamodel.aws.AwsLoadBalancerR\x0cloadBalancer\x12Z\n\x0ctarget_group\x18\x02 \x01(\x0b\x32\x37.com.intentionet.bfe.proto.datamodel.aws.AwsTargetGroupR\x0btargetGroup\x12\x1a\n\x08protocol\x18\x03 \x01(\tR\x08protocol\x12\x12\n\x04port\x18\x04 \x01(\rR\x04port\"\xba\x01\n\x14PublicInstancesInput\x12Q\n\rexpected_tags\x18\x01 \x03(\x0b\x32,.com.intentionet.bfe.proto.datamodel.aws.TagR\x0c\x65xpectedTags\x12O\n\tinstances\x18\x02 \x01(\x0b\x32\x31.com.intentionet.bfe.assertions.AwsInstanceFilterR\tinstances\"\xb9\x03\n\x15PublicInstancesResult\x12\\\n\tviolators\x18\x01 \x03(\x0b\x32>.com.intentionet.bfe.assertions.PublicInstancesResult.ViolatorR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\x8c\x02\n\x08Violator\x12P\n\x08instance\x18\x01 \x01(\x0b\x32\x34.com.intentionet.bfe.proto.datamodel.aws.AwsInstanceR\x08instance\x12O\n\x0cmissing_tags\x18\x02 \x03(\x0b\x32,.com.intentionet.bfe.proto.datamodel.aws.TagR\x0bmissingTags\x12]\n\x11\x64\x65scription_index\x18\x03 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndex\"\"\n PassiveBgpNoSubnetAssertionInput\"\xde\x01\n!PassiveBgpNoSubnetAssertionResult\x12g\n\tviolators\x18\x01 \x03(\x0b\x32I.com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionResult.ElementR\tviolators\x1aP\n\x07\x45lement\x12\x45\n\x0cpassive_peer\x18\x01 \x01(\x0b\x32\".com.intentionet.datamodel.BgpPeerR\x0bpassivePeer\"\xae\x02\n*SecurityGroupDoesNotHaveRuleAssertionInput\x12\\\n\x0fsecurity_groups\x18\x05 \x01(\x0b\x32\x33.com.intentionet.bfe.assertions.SecurityGroupFilterR\x0esecurityGroups\x12G\n\trule_type\x18\x03 \x01(\x0e\x32*.com.intentionet.bfe.assertions.SgRuleTypeR\x08ruleType\x12M\n\x05rules\x18\x04 \x03(\x0b\x32\x37.com.intentionet.bfe.assertions.MatchSecurityGroupRulesR\x05rulesJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03\"\xa2\x03\n+SecurityGroupDoesNotHaveRuleAssertionResult\x12q\n\tviolators\x18\x01 \x03(\x0b\x32S.com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionResult.ElementR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\xca\x01\n\x07\x45lement\x12`\n\x0esecurity_group\x18\x01 \x01(\x0b\x32\x39.com.intentionet.bfe.proto.datamodel.aws.AwsSecurityGroupR\rsecurityGroup\x12]\n\x11\x64\x65scription_index\x18\x02 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndex\"\x1b\n\x19SgRulesBlockedByNaclInput\"\xe7\x05\n\x1aSgRulesBlockedByNaclResult\x12`\n\tviolators\x18\x01 \x03(\x0b\x32\x42.com.intentionet.bfe.assertions.SgRulesBlockedByNaclResult.ElementR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\xb1\x04\n\x07\x45lement\x12`\n\x0esecurity_group\x18\x02 \x01(\x0b\x32\x39.com.intentionet.bfe.proto.datamodel.aws.AwsSecurityGroupR\rsecurityGroup\x12\x17\n\x07nacl_id\x18\x04 \x01(\tR\x06naclId\x12t\n\x16inbound_security_rules\x18\x06 \x03(\x0b\x32>.com.intentionet.bfe.proto.datamodel.aws.AwsSecurityGroup.RuleR\x14inboundSecurityRules\x12v\n\x17outbound_security_rules\x18\x07 \x03(\x0b\x32>.com.intentionet.bfe.proto.datamodel.aws.AwsSecurityGroup.RuleR\x15outboundSecurityRules\x12L\n\x07subnets\x18\x08 \x03(\x0b\x32\x32.com.intentionet.bfe.proto.datamodel.aws.AwsSubnetR\x07subnets\x12]\n\x11\x64\x65scription_index\x18\t \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndexJ\x04\x08\x01\x10\x02J\x04\x08\x03\x10\x04J\x04\x08\x05\x10\x06\"\x81\x01\n\x13SteppingStonesInput\x12\x17\n\x07\x64st_ips\x18\x01 \x01(\tR\x06\x64stIps\x12Q\n\rincluded_tags\x18\x02 \x03(\x0b\x32,.com.intentionet.bfe.proto.datamodel.aws.TagR\x0cincludedTags\"\x9d\x03\n\x14SteppingStonesResult\x12[\n\tviolators\x18\x01 \x03(\x0b\x32=.com.intentionet.bfe.assertions.SteppingStonesResult.ViolatorR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\xf2\x01\n\x08Violator\x12P\n\x08instance\x18\x01 \x01(\x0b\x32\x34.com.intentionet.bfe.proto.datamodel.aws.AwsInstanceR\x08instance\x12\x35\n\x05\x66lows\x18\x02 \x03(\x0b\x32\x1f.com.intentionet.datamodel.FlowR\x05\x66lows\x12]\n\x11\x64\x65scription_index\x18\x03 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndex\"h\n\x15VpcEndpointForS3Input\x12O\n\tinstances\x18\x01 \x01(\x0b\x32\x31.com.intentionet.bfe.assertions.AwsInstanceFilterR\tinstances\"\xc6\x03\n\x16VpcEndpointForS3Result\x12]\n\tviolators\x18\x01 \x03(\x0b\x32?.com.intentionet.bfe.assertions.VpcEndpointForS3Result.ViolatorR\tviolators\x12\x33\n\x15violator_descriptions\x18\x02 \x03(\tR\x14violatorDescriptions\x1a\x97\x02\n\x08Violator\x12P\n\x08instance\x18\x01 \x01(\x0b\x32\x34.com.intentionet.bfe.proto.datamodel.aws.AwsInstanceR\x08instance\x12\x35\n\x05\x66lows\x18\x02 \x03(\x0b\x32\x1f.com.intentionet.datamodel.FlowR\x05\x66lows\x12#\n\rvpc_endpoints\x18\x03 \x03(\tR\x0cvpcEndpoints\x12]\n\x11\x64\x65scription_index\x18\x04 \x01(\x0b\x32\x30.com.intentionet.bfe.assertions.DescriptionIndexR\x10\x64\x65scriptionIndex*\xa1\x01\n\x0f\x41ssertionStatus\x12\x1c\n\x18\x41SSERTION_STATUS_UNKNOWN\x10\x00\x12\x19\n\x15\x41SSERTION_STATUS_PASS\x10\x01\x12\x19\n\x15\x41SSERTION_STATUS_FAIL\x10\x02\x12\x1a\n\x16\x41SSERTION_STATUS_ERROR\x10\x03\x12\x1e\n\x1a\x41SSERTION_STATUS_PASS_WARN\x10\x04*d\n\x12\x41ssertionErrorCode\x12\x0b\n\x07UNKNOWN\x10\x00\x12\r\n\tBFE_ERROR\x10\x01\x12\x1c\n\x18UNSATISFIED_PRECONDITION\x10\x02\x12\x14\n\x10INVALID_ARGUMENT\x10\x03*Z\n\nSgRuleType\x12\x17\n\x13SG_RULE_TYPE_EITHER\x10\x00\x12\x18\n\x14SG_RULE_TYPE_INBOUND\x10\x01\x12\x19\n\x15SG_RULE_TYPE_OUTBOUND\x10\x02\x62\x06proto3')

_ASSERTIONSTATUS = DESCRIPTOR.enum_types_by_name['AssertionStatus']
AssertionStatus = enum_type_wrapper.EnumTypeWrapper(_ASSERTIONSTATUS)
_ASSERTIONERRORCODE = DESCRIPTOR.enum_types_by_name['AssertionErrorCode']
AssertionErrorCode = enum_type_wrapper.EnumTypeWrapper(_ASSERTIONERRORCODE)
_SGRULETYPE = DESCRIPTOR.enum_types_by_name['SgRuleType']
SgRuleType = enum_type_wrapper.EnumTypeWrapper(_SGRULETYPE)
ASSERTION_STATUS_UNKNOWN = 0
ASSERTION_STATUS_PASS = 1
ASSERTION_STATUS_FAIL = 2
ASSERTION_STATUS_ERROR = 3
ASSERTION_STATUS_PASS_WARN = 4
UNKNOWN = 0
BFE_ERROR = 1
UNSATISFIED_PRECONDITION = 2
INVALID_ARGUMENT = 3
SG_RULE_TYPE_EITHER = 0
SG_RULE_TYPE_INBOUND = 1
SG_RULE_TYPE_OUTBOUND = 2


_ASSERTIONINPUT = DESCRIPTOR.message_types_by_name['AssertionInput']
_PARSEASSERTIONINPUTREQUEST = DESCRIPTOR.message_types_by_name['ParseAssertionInputRequest']
_PARSEASSERTIONINPUTRESPONSE = DESCRIPTOR.message_types_by_name['ParseAssertionInputResponse']
_ASSERTIONRESULT = DESCRIPTOR.message_types_by_name['AssertionResult']
_ASSERTIONRESULTMETADATA = DESCRIPTOR.message_types_by_name['AssertionResultMetadata']
_ASSERTIONRESULTWARNINGS = DESCRIPTOR.message_types_by_name['AssertionResultWarnings']
_ASSERTIONEXECUTIONERROR = DESCRIPTOR.message_types_by_name['AssertionExecutionError']
_ASSERTIONSTATS = DESCRIPTOR.message_types_by_name['AssertionStats']
_REMEDIATIONSUGGESTION = DESCRIPTOR.message_types_by_name['RemediationSuggestion']
_DEVICESHAVESERVERSASSERTIONINPUT = DESCRIPTOR.message_types_by_name['DevicesHaveServersAssertionInput']
_DEVICESHAVESERVERSASSERTIONRESULT = DESCRIPTOR.message_types_by_name['DevicesHaveServersAssertionResult']
_DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT = _DEVICESHAVESERVERSASSERTIONRESULT.nested_types_by_name['Element']
_PUBLICIPNOTINPRIVATESUBNETINPUT = DESCRIPTOR.message_types_by_name['PublicIpNotInPrivateSubnetInput']
_PUBLICIPNOTINPRIVATESUBNETRESULT = DESCRIPTOR.message_types_by_name['PublicIpNotInPrivateSubnetResult']
_PUBLICIPNOTINPRIVATESUBNETRESULT_VIOLATOR = _PUBLICIPNOTINPRIVATESUBNETRESULT.nested_types_by_name['Violator']
_LBTARGETSWITHPUBLICIPINPUT = DESCRIPTOR.message_types_by_name['LbTargetsWithPublicIpInput']
_LBTARGETSWITHPUBLICIPRESULT = DESCRIPTOR.message_types_by_name['LbTargetsWithPublicIpResult']
_LBTARGETSWITHPUBLICIPRESULT_VIOLATOR = _LBTARGETSWITHPUBLICIPRESULT.nested_types_by_name['Violator']
_LBTARGETSWITHPUBLICIPRESULT_LBDETAIL = _LBTARGETSWITHPUBLICIPRESULT.nested_types_by_name['LBDetail']
_PUBLICINSTANCESINPUT = DESCRIPTOR.message_types_by_name['PublicInstancesInput']
_PUBLICINSTANCESRESULT = DESCRIPTOR.message_types_by_name['PublicInstancesResult']
_PUBLICINSTANCESRESULT_VIOLATOR = _PUBLICINSTANCESRESULT.nested_types_by_name['Violator']
_PASSIVEBGPNOSUBNETASSERTIONINPUT = DESCRIPTOR.message_types_by_name['PassiveBgpNoSubnetAssertionInput']
_PASSIVEBGPNOSUBNETASSERTIONRESULT = DESCRIPTOR.message_types_by_name['PassiveBgpNoSubnetAssertionResult']
_PASSIVEBGPNOSUBNETASSERTIONRESULT_ELEMENT = _PASSIVEBGPNOSUBNETASSERTIONRESULT.nested_types_by_name['Element']
_SECURITYGROUPDOESNOTHAVERULEASSERTIONINPUT = DESCRIPTOR.message_types_by_name['SecurityGroupDoesNotHaveRuleAssertionInput']
_SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT = DESCRIPTOR.message_types_by_name['SecurityGroupDoesNotHaveRuleAssertionResult']
_SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT_ELEMENT = _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT.nested_types_by_name['Element']
_SGRULESBLOCKEDBYNACLINPUT = DESCRIPTOR.message_types_by_name['SgRulesBlockedByNaclInput']
_SGRULESBLOCKEDBYNACLRESULT = DESCRIPTOR.message_types_by_name['SgRulesBlockedByNaclResult']
_SGRULESBLOCKEDBYNACLRESULT_ELEMENT = _SGRULESBLOCKEDBYNACLRESULT.nested_types_by_name['Element']
_STEPPINGSTONESINPUT = DESCRIPTOR.message_types_by_name['SteppingStonesInput']
_STEPPINGSTONESRESULT = DESCRIPTOR.message_types_by_name['SteppingStonesResult']
_STEPPINGSTONESRESULT_VIOLATOR = _STEPPINGSTONESRESULT.nested_types_by_name['Violator']
_VPCENDPOINTFORS3INPUT = DESCRIPTOR.message_types_by_name['VpcEndpointForS3Input']
_VPCENDPOINTFORS3RESULT = DESCRIPTOR.message_types_by_name['VpcEndpointForS3Result']
_VPCENDPOINTFORS3RESULT_VIOLATOR = _VPCENDPOINTFORS3RESULT.nested_types_by_name['Violator']
AssertionInput = _reflection.GeneratedProtocolMessageType('AssertionInput', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionInput)
  })
_sym_db.RegisterMessage(AssertionInput)

ParseAssertionInputRequest = _reflection.GeneratedProtocolMessageType('ParseAssertionInputRequest', (_message.Message,), {
  'DESCRIPTOR' : _PARSEASSERTIONINPUTREQUEST,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.ParseAssertionInputRequest)
  })
_sym_db.RegisterMessage(ParseAssertionInputRequest)

ParseAssertionInputResponse = _reflection.GeneratedProtocolMessageType('ParseAssertionInputResponse', (_message.Message,), {
  'DESCRIPTOR' : _PARSEASSERTIONINPUTRESPONSE,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.ParseAssertionInputResponse)
  })
_sym_db.RegisterMessage(ParseAssertionInputResponse)

AssertionResult = _reflection.GeneratedProtocolMessageType('AssertionResult', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionResult)
  })
_sym_db.RegisterMessage(AssertionResult)

AssertionResultMetadata = _reflection.GeneratedProtocolMessageType('AssertionResultMetadata', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONRESULTMETADATA,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionResultMetadata)
  })
_sym_db.RegisterMessage(AssertionResultMetadata)

AssertionResultWarnings = _reflection.GeneratedProtocolMessageType('AssertionResultWarnings', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONRESULTWARNINGS,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionResultWarnings)
  })
_sym_db.RegisterMessage(AssertionResultWarnings)

AssertionExecutionError = _reflection.GeneratedProtocolMessageType('AssertionExecutionError', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONEXECUTIONERROR,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionExecutionError)
  })
_sym_db.RegisterMessage(AssertionExecutionError)

AssertionStats = _reflection.GeneratedProtocolMessageType('AssertionStats', (_message.Message,), {
  'DESCRIPTOR' : _ASSERTIONSTATS,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AssertionStats)
  })
_sym_db.RegisterMessage(AssertionStats)

RemediationSuggestion = _reflection.GeneratedProtocolMessageType('RemediationSuggestion', (_message.Message,), {
  'DESCRIPTOR' : _REMEDIATIONSUGGESTION,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.RemediationSuggestion)
  })
_sym_db.RegisterMessage(RemediationSuggestion)

DevicesHaveServersAssertionInput = _reflection.GeneratedProtocolMessageType('DevicesHaveServersAssertionInput', (_message.Message,), {
  'DESCRIPTOR' : _DEVICESHAVESERVERSASSERTIONINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.DevicesHaveServersAssertionInput)
  })
_sym_db.RegisterMessage(DevicesHaveServersAssertionInput)

DevicesHaveServersAssertionResult = _reflection.GeneratedProtocolMessageType('DevicesHaveServersAssertionResult', (_message.Message,), {

  'Element' : _reflection.GeneratedProtocolMessageType('Element', (_message.Message,), {
    'DESCRIPTOR' : _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.DevicesHaveServersAssertionResult.Element)
    })
  ,
  'DESCRIPTOR' : _DEVICESHAVESERVERSASSERTIONRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.DevicesHaveServersAssertionResult)
  })
_sym_db.RegisterMessage(DevicesHaveServersAssertionResult)
_sym_db.RegisterMessage(DevicesHaveServersAssertionResult.Element)

PublicIpNotInPrivateSubnetInput = _reflection.GeneratedProtocolMessageType('PublicIpNotInPrivateSubnetInput', (_message.Message,), {
  'DESCRIPTOR' : _PUBLICIPNOTINPRIVATESUBNETINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetInput)
  })
_sym_db.RegisterMessage(PublicIpNotInPrivateSubnetInput)

PublicIpNotInPrivateSubnetResult = _reflection.GeneratedProtocolMessageType('PublicIpNotInPrivateSubnetResult', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _PUBLICIPNOTINPRIVATESUBNETRESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetResult.Violator)
    })
  ,
  'DESCRIPTOR' : _PUBLICIPNOTINPRIVATESUBNETRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicIpNotInPrivateSubnetResult)
  })
_sym_db.RegisterMessage(PublicIpNotInPrivateSubnetResult)
_sym_db.RegisterMessage(PublicIpNotInPrivateSubnetResult.Violator)

LbTargetsWithPublicIpInput = _reflection.GeneratedProtocolMessageType('LbTargetsWithPublicIpInput', (_message.Message,), {
  'DESCRIPTOR' : _LBTARGETSWITHPUBLICIPINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.LbTargetsWithPublicIpInput)
  })
_sym_db.RegisterMessage(LbTargetsWithPublicIpInput)

LbTargetsWithPublicIpResult = _reflection.GeneratedProtocolMessageType('LbTargetsWithPublicIpResult', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _LBTARGETSWITHPUBLICIPRESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.LbTargetsWithPublicIpResult.Violator)
    })
  ,

  'LBDetail' : _reflection.GeneratedProtocolMessageType('LBDetail', (_message.Message,), {
    'DESCRIPTOR' : _LBTARGETSWITHPUBLICIPRESULT_LBDETAIL,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.LbTargetsWithPublicIpResult.LBDetail)
    })
  ,
  'DESCRIPTOR' : _LBTARGETSWITHPUBLICIPRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.LbTargetsWithPublicIpResult)
  })
_sym_db.RegisterMessage(LbTargetsWithPublicIpResult)
_sym_db.RegisterMessage(LbTargetsWithPublicIpResult.Violator)
_sym_db.RegisterMessage(LbTargetsWithPublicIpResult.LBDetail)

PublicInstancesInput = _reflection.GeneratedProtocolMessageType('PublicInstancesInput', (_message.Message,), {
  'DESCRIPTOR' : _PUBLICINSTANCESINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicInstancesInput)
  })
_sym_db.RegisterMessage(PublicInstancesInput)

PublicInstancesResult = _reflection.GeneratedProtocolMessageType('PublicInstancesResult', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _PUBLICINSTANCESRESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicInstancesResult.Violator)
    })
  ,
  'DESCRIPTOR' : _PUBLICINSTANCESRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PublicInstancesResult)
  })
_sym_db.RegisterMessage(PublicInstancesResult)
_sym_db.RegisterMessage(PublicInstancesResult.Violator)

PassiveBgpNoSubnetAssertionInput = _reflection.GeneratedProtocolMessageType('PassiveBgpNoSubnetAssertionInput', (_message.Message,), {
  'DESCRIPTOR' : _PASSIVEBGPNOSUBNETASSERTIONINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionInput)
  })
_sym_db.RegisterMessage(PassiveBgpNoSubnetAssertionInput)

PassiveBgpNoSubnetAssertionResult = _reflection.GeneratedProtocolMessageType('PassiveBgpNoSubnetAssertionResult', (_message.Message,), {

  'Element' : _reflection.GeneratedProtocolMessageType('Element', (_message.Message,), {
    'DESCRIPTOR' : _PASSIVEBGPNOSUBNETASSERTIONRESULT_ELEMENT,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionResult.Element)
    })
  ,
  'DESCRIPTOR' : _PASSIVEBGPNOSUBNETASSERTIONRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.PassiveBgpNoSubnetAssertionResult)
  })
_sym_db.RegisterMessage(PassiveBgpNoSubnetAssertionResult)
_sym_db.RegisterMessage(PassiveBgpNoSubnetAssertionResult.Element)

SecurityGroupDoesNotHaveRuleAssertionInput = _reflection.GeneratedProtocolMessageType('SecurityGroupDoesNotHaveRuleAssertionInput', (_message.Message,), {
  'DESCRIPTOR' : _SECURITYGROUPDOESNOTHAVERULEASSERTIONINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionInput)
  })
_sym_db.RegisterMessage(SecurityGroupDoesNotHaveRuleAssertionInput)

SecurityGroupDoesNotHaveRuleAssertionResult = _reflection.GeneratedProtocolMessageType('SecurityGroupDoesNotHaveRuleAssertionResult', (_message.Message,), {

  'Element' : _reflection.GeneratedProtocolMessageType('Element', (_message.Message,), {
    'DESCRIPTOR' : _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT_ELEMENT,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionResult.Element)
    })
  ,
  'DESCRIPTOR' : _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SecurityGroupDoesNotHaveRuleAssertionResult)
  })
_sym_db.RegisterMessage(SecurityGroupDoesNotHaveRuleAssertionResult)
_sym_db.RegisterMessage(SecurityGroupDoesNotHaveRuleAssertionResult.Element)

SgRulesBlockedByNaclInput = _reflection.GeneratedProtocolMessageType('SgRulesBlockedByNaclInput', (_message.Message,), {
  'DESCRIPTOR' : _SGRULESBLOCKEDBYNACLINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SgRulesBlockedByNaclInput)
  })
_sym_db.RegisterMessage(SgRulesBlockedByNaclInput)

SgRulesBlockedByNaclResult = _reflection.GeneratedProtocolMessageType('SgRulesBlockedByNaclResult', (_message.Message,), {

  'Element' : _reflection.GeneratedProtocolMessageType('Element', (_message.Message,), {
    'DESCRIPTOR' : _SGRULESBLOCKEDBYNACLRESULT_ELEMENT,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SgRulesBlockedByNaclResult.Element)
    })
  ,
  'DESCRIPTOR' : _SGRULESBLOCKEDBYNACLRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SgRulesBlockedByNaclResult)
  })
_sym_db.RegisterMessage(SgRulesBlockedByNaclResult)
_sym_db.RegisterMessage(SgRulesBlockedByNaclResult.Element)

SteppingStonesInput = _reflection.GeneratedProtocolMessageType('SteppingStonesInput', (_message.Message,), {
  'DESCRIPTOR' : _STEPPINGSTONESINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SteppingStonesInput)
  })
_sym_db.RegisterMessage(SteppingStonesInput)

SteppingStonesResult = _reflection.GeneratedProtocolMessageType('SteppingStonesResult', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _STEPPINGSTONESRESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SteppingStonesResult.Violator)
    })
  ,
  'DESCRIPTOR' : _STEPPINGSTONESRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.SteppingStonesResult)
  })
_sym_db.RegisterMessage(SteppingStonesResult)
_sym_db.RegisterMessage(SteppingStonesResult.Violator)

VpcEndpointForS3Input = _reflection.GeneratedProtocolMessageType('VpcEndpointForS3Input', (_message.Message,), {
  'DESCRIPTOR' : _VPCENDPOINTFORS3INPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.VpcEndpointForS3Input)
  })
_sym_db.RegisterMessage(VpcEndpointForS3Input)

VpcEndpointForS3Result = _reflection.GeneratedProtocolMessageType('VpcEndpointForS3Result', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _VPCENDPOINTFORS3RESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.VpcEndpointForS3Result.Violator)
    })
  ,
  'DESCRIPTOR' : _VPCENDPOINTFORS3RESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.core_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.VpcEndpointForS3Result)
  })
_sym_db.RegisterMessage(VpcEndpointForS3Result)
_sym_db.RegisterMessage(VpcEndpointForS3Result.Violator)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT.fields_by_name['servers']._options = None
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT.fields_by_name['servers']._serialized_options = b'\030\001'
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT.fields_by_name['description_index']._options = None
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT.fields_by_name['description_index']._serialized_options = b'\030\001'
  _DEVICESHAVESERVERSASSERTIONRESULT.fields_by_name['violator_descriptions']._options = None
  _DEVICESHAVESERVERSASSERTIONRESULT.fields_by_name['violator_descriptions']._serialized_options = b'\030\001'
  _ASSERTIONSTATUS._serialized_start=14297
  _ASSERTIONSTATUS._serialized_end=14458
  _ASSERTIONERRORCODE._serialized_start=14460
  _ASSERTIONERRORCODE._serialized_end=14560
  _SGRULETYPE._serialized_start=14562
  _SGRULETYPE._serialized_end=14652
  _ASSERTIONINPUT._serialized_start=890
  _ASSERTIONINPUT._serialized_end=4169
  _PARSEASSERTIONINPUTREQUEST._serialized_start=4171
  _PARSEASSERTIONINPUTREQUEST._serialized_end=4219
  _PARSEASSERTIONINPUTRESPONSE._serialized_start=4221
  _PARSEASSERTIONINPUTRESPONSE._serialized_end=4328
  _ASSERTIONRESULT._serialized_start=4331
  _ASSERTIONRESULT._serialized_end=7668
  _ASSERTIONRESULTMETADATA._serialized_start=7671
  _ASSERTIONRESULTMETADATA._serialized_end=8003
  _ASSERTIONRESULTWARNINGS._serialized_start=8005
  _ASSERTIONRESULTWARNINGS._serialized_end=8058
  _ASSERTIONEXECUTIONERROR._serialized_start=8060
  _ASSERTIONEXECUTIONERROR._serialized_end=8183
  _ASSERTIONSTATS._serialized_start=8185
  _ASSERTIONSTATS._serialized_end=8305
  _REMEDIATIONSUGGESTION._serialized_start=8307
  _REMEDIATIONSUGGESTION._serialized_end=8384
  _DEVICESHAVESERVERSASSERTIONINPUT._serialized_start=8387
  _DEVICESHAVESERVERSASSERTIONINPUT._serialized_end=8569
  _DEVICESHAVESERVERSASSERTIONRESULT._serialized_start=8572
  _DEVICESHAVESERVERSASSERTIONRESULT._serialized_end=9165
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT._serialized_start=8879
  _DEVICESHAVESERVERSASSERTIONRESULT_ELEMENT._serialized_end=9165
  _PUBLICIPNOTINPRIVATESUBNETINPUT._serialized_start=9168
  _PUBLICIPNOTINPRIVATESUBNETINPUT._serialized_end=9307
  _PUBLICIPNOTINPRIVATESUBNETRESULT._serialized_start=9310
  _PUBLICIPNOTINPRIVATESUBNETRESULT._serialized_end=9955
  _PUBLICIPNOTINPRIVATESUBNETRESULT_VIOLATOR._serialized_start=9505
  _PUBLICIPNOTINPRIVATESUBNETRESULT_VIOLATOR._serialized_end=9955
  _LBTARGETSWITHPUBLICIPINPUT._serialized_start=9957
  _LBTARGETSWITHPUBLICIPINPUT._serialized_end=10066
  _LBTARGETSWITHPUBLICIPRESULT._serialized_start=10069
  _LBTARGETSWITHPUBLICIPRESULT._serialized_end=10788
  _LBTARGETSWITHPUBLICIPRESULT_VIOLATOR._serialized_start=10254
  _LBTARGETSWITHPUBLICIPRESULT_VIOLATOR._serialized_end=10540
  _LBTARGETSWITHPUBLICIPRESULT_LBDETAIL._serialized_start=10543
  _LBTARGETSWITHPUBLICIPRESULT_LBDETAIL._serialized_end=10788
  _PUBLICINSTANCESINPUT._serialized_start=10791
  _PUBLICINSTANCESINPUT._serialized_end=10977
  _PUBLICINSTANCESRESULT._serialized_start=10980
  _PUBLICINSTANCESRESULT._serialized_end=11421
  _PUBLICINSTANCESRESULT_VIOLATOR._serialized_start=11153
  _PUBLICINSTANCESRESULT_VIOLATOR._serialized_end=11421
  _PASSIVEBGPNOSUBNETASSERTIONINPUT._serialized_start=11423
  _PASSIVEBGPNOSUBNETASSERTIONINPUT._serialized_end=11457
  _PASSIVEBGPNOSUBNETASSERTIONRESULT._serialized_start=11460
  _PASSIVEBGPNOSUBNETASSERTIONRESULT._serialized_end=11682
  _PASSIVEBGPNOSUBNETASSERTIONRESULT_ELEMENT._serialized_start=11602
  _PASSIVEBGPNOSUBNETASSERTIONRESULT_ELEMENT._serialized_end=11682
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONINPUT._serialized_start=11685
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONINPUT._serialized_end=11987
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT._serialized_start=11990
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT._serialized_end=12408
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT_ELEMENT._serialized_start=12206
  _SECURITYGROUPDOESNOTHAVERULEASSERTIONRESULT_ELEMENT._serialized_end=12408
  _SGRULESBLOCKEDBYNACLINPUT._serialized_start=12410
  _SGRULESBLOCKEDBYNACLINPUT._serialized_end=12437
  _SGRULESBLOCKEDBYNACLRESULT._serialized_start=12440
  _SGRULESBLOCKEDBYNACLRESULT._serialized_end=13183
  _SGRULESBLOCKEDBYNACLRESULT_ELEMENT._serialized_start=12622
  _SGRULESBLOCKEDBYNACLRESULT_ELEMENT._serialized_end=13183
  _STEPPINGSTONESINPUT._serialized_start=13186
  _STEPPINGSTONESINPUT._serialized_end=13315
  _STEPPINGSTONESRESULT._serialized_start=13318
  _STEPPINGSTONESRESULT._serialized_end=13731
  _STEPPINGSTONESRESULT_VIOLATOR._serialized_start=13489
  _STEPPINGSTONESRESULT_VIOLATOR._serialized_end=13731
  _VPCENDPOINTFORS3INPUT._serialized_start=13733
  _VPCENDPOINTFORS3INPUT._serialized_end=13837
  _VPCENDPOINTFORS3RESULT._serialized_start=13840
  _VPCENDPOINTFORS3RESULT._serialized_end=14294
  _VPCENDPOINTFORS3RESULT_VIOLATOR._serialized_start=14015
  _VPCENDPOINTFORS3RESULT_VIOLATOR._serialized_end=14294
# @@protoc_insertion_point(module_scope)
