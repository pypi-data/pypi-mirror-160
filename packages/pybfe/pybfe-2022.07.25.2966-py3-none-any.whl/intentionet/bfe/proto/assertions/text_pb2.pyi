"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import intentionet.bfe.proto.assertions.parameters_pb2
import intentionet.bfe.proto.datamodel.config_text_pb2
import intentionet.bfe.proto.datamodel.device_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class DevicesHaveDefinitionTextInput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DEVICES_FIELD_NUMBER: builtins.int
    STRUCTURE_TYPE_FIELD_NUMBER: builtins.int
    STRUCTURE_NAME_FIELD_NUMBER: builtins.int
    DEFINITION_TEXT_FIELD_NUMBER: builtins.int
    DEFINITION_TEXT_MATCHES_FIELD_NUMBER: builtins.int
    @property
    def devices(self) -> intentionet.bfe.proto.assertions.parameters_pb2.DeviceFilterExpr: ...
    structure_type: typing.Text
    structure_name: typing.Text
    definition_text: typing.Text
    @property
    def definition_text_matches(self) -> global___TextMatchExpr: ...
    def __init__(self,
        *,
        devices: typing.Optional[intentionet.bfe.proto.assertions.parameters_pb2.DeviceFilterExpr] = ...,
        structure_type: typing.Text = ...,
        structure_name: typing.Text = ...,
        definition_text: typing.Text = ...,
        definition_text_matches: typing.Optional[global___TextMatchExpr] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["definition_text_matches",b"definition_text_matches","devices",b"devices"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["definition_text",b"definition_text","definition_text_matches",b"definition_text_matches","devices",b"devices","structure_name",b"structure_name","structure_type",b"structure_type"]) -> None: ...
global___DevicesHaveDefinitionTextInput = DevicesHaveDefinitionTextInput

class DevicesHaveDefinitionTextResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class WrongText(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        STRUCTURE_TYPE_FIELD_NUMBER: builtins.int
        STRUCTURE_NAME_FIELD_NUMBER: builtins.int
        DEFINITION_TEXT_FIELD_NUMBER: builtins.int
        structure_type: typing.Text
        structure_name: typing.Text
        definition_text: typing.Text
        def __init__(self,
            *,
            structure_type: typing.Text = ...,
            structure_name: typing.Text = ...,
            definition_text: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["definition_text",b"definition_text","structure_name",b"structure_name","structure_type",b"structure_type"]) -> None: ...

    class NoSuchStructure(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        MATCHING_STRUCTURE_TYPES_FIELD_NUMBER: builtins.int
        MATCHING_STRUCTURE_NAMES_FIELD_NUMBER: builtins.int
        @property
        def matching_structure_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
        @property
        def matching_structure_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
        def __init__(self,
            *,
            matching_structure_types: typing.Optional[typing.Iterable[typing.Text]] = ...,
            matching_structure_names: typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["matching_structure_names",b"matching_structure_names","matching_structure_types",b"matching_structure_types"]) -> None: ...

    class Violator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        WRONG_TEXT_FIELD_NUMBER: builtins.int
        NO_SUCH_STRUCTURE_FIELD_NUMBER: builtins.int
        TEXT_MATCH_EXPR_RESULT_FIELD_NUMBER: builtins.int
        NO_SUCH_STRUCTURE_V2_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def wrong_text(self) -> global___DevicesHaveDefinitionTextResult.WrongText: ...
        @property
        def no_such_structure(self) -> global___DevicesHaveDefinitionTextResult.NoSuchStructure: ...
        @property
        def text_match_expr_result(self) -> global___TextMatchExprResult: ...
        @property
        def no_such_structure_v2(self) -> global___DevicesHaveDefinitionTextResult.NoSuchStructure: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            wrong_text: typing.Optional[global___DevicesHaveDefinitionTextResult.WrongText] = ...,
            no_such_structure: typing.Optional[global___DevicesHaveDefinitionTextResult.NoSuchStructure] = ...,
            text_match_expr_result: typing.Optional[global___TextMatchExprResult] = ...,
            no_such_structure_v2: typing.Optional[global___DevicesHaveDefinitionTextResult.NoSuchStructure] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device","no_such_structure",b"no_such_structure","no_such_structure_v2",b"no_such_structure_v2","problem",b"problem","result",b"result","text_match_expr_result",b"text_match_expr_result","wrong_text",b"wrong_text"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","no_such_structure",b"no_such_structure","no_such_structure_v2",b"no_such_structure_v2","problem",b"problem","result",b"result","text_match_expr_result",b"text_match_expr_result","wrong_text",b"wrong_text"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["problem",b"problem"]) -> typing.Optional[typing_extensions.Literal["wrong_text","no_such_structure"]]: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["result",b"result"]) -> typing.Optional[typing_extensions.Literal["text_match_expr_result","no_such_structure_v2"]]: ...

    class Conformer(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        TEXT_MATCH_EXPR_RESULT_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def text_match_expr_result(self) -> global___TextMatchExprResult: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            text_match_expr_result: typing.Optional[global___TextMatchExprResult] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device","text_match_expr_result",b"text_match_expr_result"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","text_match_expr_result",b"text_match_expr_result"]) -> None: ...

    CONFORMERS_FIELD_NUMBER: builtins.int
    CONFORMERS_V2_FIELD_NUMBER: builtins.int
    VIOLATORS_FIELD_NUMBER: builtins.int
    @property
    def conformers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[intentionet.bfe.proto.datamodel.device_pb2.Device]: ...
    @property
    def conformers_v2(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DevicesHaveDefinitionTextResult.Conformer]: ...
    @property
    def violators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DevicesHaveDefinitionTextResult.Violator]: ...
    def __init__(self,
        *,
        conformers: typing.Optional[typing.Iterable[intentionet.bfe.proto.datamodel.device_pb2.Device]] = ...,
        conformers_v2: typing.Optional[typing.Iterable[global___DevicesHaveDefinitionTextResult.Conformer]] = ...,
        violators: typing.Optional[typing.Iterable[global___DevicesHaveDefinitionTextResult.Violator]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["conformers",b"conformers","conformers_v2",b"conformers_v2","violators",b"violators"]) -> None: ...
global___DevicesHaveDefinitionTextResult = DevicesHaveDefinitionTextResult

class DevicesHaveTextInput(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    DEVICES_FIELD_NUMBER: builtins.int
    MATCHES_REGEX_FIELD_NUMBER: builtins.int
    TEXT_MATCHES_FIELD_NUMBER: builtins.int
    @property
    def devices(self) -> intentionet.bfe.proto.assertions.parameters_pb2.DeviceFilterExpr: ...
    @property
    def matches_regex(self) -> global___TextMatchesRegex: ...
    @property
    def text_matches(self) -> global___TextMatchExpr: ...
    def __init__(self,
        *,
        devices: typing.Optional[intentionet.bfe.proto.assertions.parameters_pb2.DeviceFilterExpr] = ...,
        matches_regex: typing.Optional[global___TextMatchesRegex] = ...,
        text_matches: typing.Optional[global___TextMatchExpr] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["devices",b"devices","matches_regex",b"matches_regex","text_matches",b"text_matches"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["devices",b"devices","matches_regex",b"matches_regex","text_matches",b"text_matches"]) -> None: ...
global___DevicesHaveTextInput = DevicesHaveTextInput

class TextMatchesRegex(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    REGEX_FIELD_NUMBER: builtins.int
    NOT_MATCHED_FIELD_NUMBER: builtins.int
    regex: typing.Text
    not_matched: builtins.bool
    def __init__(self,
        *,
        regex: typing.Text = ...,
        not_matched: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["not_matched",b"not_matched","regex",b"regex"]) -> None: ...
global___TextMatchesRegex = TextMatchesRegex

class TextMatchExpr(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    EQUALS_FIELD_NUMBER: builtins.int
    CONTAINS_LINE_FIELD_NUMBER: builtins.int
    MATCHES_REGEX_FIELD_NUMBER: builtins.int
    DOES_NOT_MATCH_REGEX_FIELD_NUMBER: builtins.int
    equals: typing.Text
    contains_line: typing.Text
    matches_regex: typing.Text
    does_not_match_regex: typing.Text
    def __init__(self,
        *,
        equals: typing.Text = ...,
        contains_line: typing.Text = ...,
        matches_regex: typing.Text = ...,
        does_not_match_regex: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["contains_line",b"contains_line","does_not_match_regex",b"does_not_match_regex","equals",b"equals","expr",b"expr","matches_regex",b"matches_regex"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["contains_line",b"contains_line","does_not_match_regex",b"does_not_match_regex","equals",b"equals","expr",b"expr","matches_regex",b"matches_regex"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["expr",b"expr"]) -> typing.Optional[typing_extensions.Literal["equals","contains_line","matches_regex","does_not_match_regex"]]: ...
global___TextMatchExpr = TextMatchExpr

class DevicesHaveTextResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class DoesNotMatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        FILENAMES_FIELD_NUMBER: builtins.int
        @property
        def filenames(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
        def __init__(self,
            *,
            filenames: typing.Optional[typing.Iterable[typing.Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["filenames",b"filenames"]) -> None: ...

    class IncorrectMatch(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        FILE_LINES_FIELD_NUMBER: builtins.int
        @property
        def file_lines(self) -> intentionet.bfe.proto.datamodel.config_text_pb2.FileLines: ...
        def __init__(self,
            *,
            file_lines: typing.Optional[intentionet.bfe.proto.datamodel.config_text_pb2.FileLines] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["file_lines",b"file_lines"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["file_lines",b"file_lines"]) -> None: ...

    class Conformer(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        FILE_LINES_FIELD_NUMBER: builtins.int
        TEXT_MATCH_EXPR_RESULT_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def file_lines(self) -> intentionet.bfe.proto.datamodel.config_text_pb2.FileLines: ...
        @property
        def text_match_expr_result(self) -> global___TextMatchExprResult: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            file_lines: typing.Optional[intentionet.bfe.proto.datamodel.config_text_pb2.FileLines] = ...,
            text_match_expr_result: typing.Optional[global___TextMatchExprResult] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device","file_lines",b"file_lines","text_match_expr_result",b"text_match_expr_result"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","file_lines",b"file_lines","text_match_expr_result",b"text_match_expr_result"]) -> None: ...

    class Violator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        DEVICE_FIELD_NUMBER: builtins.int
        TEXT_MATCH_EXPR_RESULT_FIELD_NUMBER: builtins.int
        DOES_NOT_MATCH_FIELD_NUMBER: builtins.int
        INCORRECT_MATCH_FIELD_NUMBER: builtins.int
        @property
        def device(self) -> intentionet.bfe.proto.datamodel.device_pb2.Device: ...
        @property
        def text_match_expr_result(self) -> global___TextMatchExprResult: ...
        @property
        def does_not_match(self) -> global___DevicesHaveTextResult.DoesNotMatch: ...
        @property
        def incorrect_match(self) -> global___DevicesHaveTextResult.IncorrectMatch: ...
        def __init__(self,
            *,
            device: typing.Optional[intentionet.bfe.proto.datamodel.device_pb2.Device] = ...,
            text_match_expr_result: typing.Optional[global___TextMatchExprResult] = ...,
            does_not_match: typing.Optional[global___DevicesHaveTextResult.DoesNotMatch] = ...,
            incorrect_match: typing.Optional[global___DevicesHaveTextResult.IncorrectMatch] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["device",b"device","does_not_match",b"does_not_match","incorrect_match",b"incorrect_match","problem",b"problem","text_match_expr_result",b"text_match_expr_result"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["device",b"device","does_not_match",b"does_not_match","incorrect_match",b"incorrect_match","problem",b"problem","text_match_expr_result",b"text_match_expr_result"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["problem",b"problem"]) -> typing.Optional[typing_extensions.Literal["does_not_match","incorrect_match"]]: ...

    CONFORMERS_FIELD_NUMBER: builtins.int
    VIOLATORS_FIELD_NUMBER: builtins.int
    @property
    def conformers(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DevicesHaveTextResult.Conformer]: ...
    @property
    def violators(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___DevicesHaveTextResult.Violator]: ...
    def __init__(self,
        *,
        conformers: typing.Optional[typing.Iterable[global___DevicesHaveTextResult.Conformer]] = ...,
        violators: typing.Optional[typing.Iterable[global___DevicesHaveTextResult.Violator]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["conformers",b"conformers","violators",b"violators"]) -> None: ...
global___DevicesHaveTextResult = DevicesHaveTextResult

class TextMatchExprResult(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ACTUAL_LINES_FIELD_NUMBER: builtins.int
    MATCHING_LINES_FIELD_NUMBER: builtins.int
    @property
    def actual_lines(self) -> intentionet.bfe.proto.datamodel.config_text_pb2.FileLines: ...
    @property
    def matching_lines(self) -> intentionet.bfe.proto.datamodel.config_text_pb2.FileLines: ...
    def __init__(self,
        *,
        actual_lines: typing.Optional[intentionet.bfe.proto.datamodel.config_text_pb2.FileLines] = ...,
        matching_lines: typing.Optional[intentionet.bfe.proto.datamodel.config_text_pb2.FileLines] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["actual_lines",b"actual_lines","matching_lines",b"matching_lines"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["actual_lines",b"actual_lines","matching_lines",b"matching_lines"]) -> None: ...
global___TextMatchExprResult = TextMatchExprResult
