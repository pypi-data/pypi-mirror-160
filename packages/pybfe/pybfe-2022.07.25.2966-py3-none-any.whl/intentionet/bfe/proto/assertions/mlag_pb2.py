# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: intentionet/bfe/proto/assertions/mlag.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from intentionet.bfe.proto.assertions import violations_pb2 as intentionet_dot_bfe_dot_proto_dot_assertions_dot_violations__pb2
from intentionet.bfe.proto.datamodel import device_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_device__pb2
from intentionet.bfe.proto.datamodel import ip_primitives_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_ip__primitives__pb2
from intentionet.bfe.proto.datamodel import range_pb2 as intentionet_dot_bfe_dot_proto_dot_datamodel_dot_range__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n+intentionet/bfe/proto/assertions/mlag.proto\x12\x1e\x63om.intentionet.bfe.assertions\x1a\x31intentionet/bfe/proto/assertions/violations.proto\x1a,intentionet/bfe/proto/datamodel/device.proto\x1a\x33intentionet/bfe/proto/datamodel/ip_primitives.proto\x1a+intentionet/bfe/proto/datamodel/range.proto\"\"\n AristaMlagAnalyzerAssertionInput\"\xbd-\n!AristaMlagAnalyzerAssertionResult\x12h\n\tviolators\x18\x01 \x03(\x0b\x32J.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.ViolatorR\tviolators\x12k\n\nconformers\x18\x02 \x03(\x0b\x32K.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.ConformerR\nconformers\x1a\xbd\x01\n\x08Violator\x12$\n\x0emlag_domain_id\x18\x01 \x01(\tR\x0cmlagDomainId\x12 \n\x0b\x64\x65scription\x18\x02 \x01(\tR\x0b\x64\x65scription\x12i\n\tviolation\x18\x03 \x01(\x0b\x32K.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.ViolationR\tviolation\x1a\xab\x01\n\tConformer\x12$\n\x0emlag_domain_id\x18\x01 \x01(\tR\x0cmlagDomainId\x12;\n\x07\x64\x65vice1\x18\x02 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice1\x12;\n\x07\x64\x65vice2\x18\x03 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice2\x1a\xb4\x03\n\tViolation\x12\x89\x01\n\x15more_than_two_devices\x18\x02 \x01(\x0b\x32T.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.MoreThanTwoDevicesH\x00R\x12moreThanTwoDevices\x12|\n\x10no_remote_device\x18\x03 \x01(\x0b\x32P.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoRemoteDeviceH\x00R\x0enoRemoteDevice\x12\x94\x01\n\x18paired_devices_violation\x18\x04 \x01(\x0b\x32X.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.PairedDevicesViolationH\x00R\x16pairedDevicesViolationB\x06\n\x04\x65xpr\x1a\xf9\x01\n\x16PairedDevicesViolation\x12;\n\x07\x64\x65vice1\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice1\x12;\n\x07\x64\x65vice2\x18\x02 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice2\x12\x65\n\x08problems\x18\x03 \x03(\x0b\x32I.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.ProblemR\x08problems\x1a\xeb\x0e\n\x07Problem\x12y\n\x0fno_peer_address\x18\x04 \x01(\x0b\x32O.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerAddressH\x00R\rnoPeerAddress\x12\x9e\x01\n\x1cno_peer_interface_configured\x18\x05 \x01(\x0b\x32[.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerInterfaceConfiguredH\x00R\x19noPeerInterfaceConfigured\x12\x92\x01\n\x18no_peer_interface_exists\x18\x06 \x01(\x0b\x32W.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerInterfaceExistsH\x00R\x15noPeerInterfaceExists\x12\x95\x01\n\x19no_local_interface_exists\x18\x07 \x01(\x0b\x32X.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalInterfaceExistsH\x00R\x16noLocalInterfaceExists\x12\x83\x01\n\x13no_local_ip_address\x18\x08 \x01(\x0b\x32R.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalIpAddressH\x00R\x10noLocalIpAddress\x12\x85\x01\n\x13ip_address_mismatch\x18\t \x01(\x0b\x32S.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.IpAddressMismatchH\x00R\x11ipAddressMismatch\x12\x94\x01\n\x18switchport_mode_mismatch\x18\n \x01(\x0b\x32X.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.SwitchportModeMismatchH\x00R\x16switchportModeMismatch\x12\x8e\x01\n\x16\x61llowed_vlans_mismatch\x18\x0b \x01(\x0b\x32V.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.AllowedVlansMismatchH\x00R\x14\x61llowedVlansMismatch\x12\x88\x01\n\x14native_vlan_mismatch\x18\x0c \x01(\x0b\x32T.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NativeVlanMismatchH\x00R\x12nativeVlanMismatch\x12\x88\x01\n\x14\x61\x63\x63\x65ss_vlan_mismatch\x18\r \x01(\x0b\x32T.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.AccessVlanMismatchH\x00R\x12\x61\x63\x63\x65ssVlanMismatch\x12\x7f\n\x11mlag_ids_mismatch\x18\x0e \x01(\x0b\x32Q.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.MlagIdsMismatchH\x00R\x0fmlagIdsMismatch\x12\x9d\x01\n\x1dpeer_link_is_not_port_channel\x18\x33 \x01(\x0b\x32Z.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.PeerLinkIsNotPortChannelH\x00R\x18peerLinkIsNotPortChannel\x12\xa1\x01\n\x1dno_local_interface_configured\x18\x34 \x01(\x0b\x32\\.com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalInterfaceConfiguredH\x00R\x1anoLocalInterfaceConfiguredB\x06\n\x04\x65xpr\x1aQ\n\x12MoreThanTwoDevices\x12;\n\x07\x64\x65vices\x18\x01 \x03(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vices\x1aK\n\x0eNoRemoteDevice\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x1aJ\n\rNoPeerAddress\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x1aV\n\x19NoPeerInterfaceConfigured\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x1a\x82\x01\n\x15NoPeerInterfaceExists\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x12.\n\x13peer_interface_name\x18\x02 \x01(\tR\x11peerInterfaceName\x1a\x85\x01\n\x16NoLocalInterfaceExists\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x12\x30\n\x14local_interface_name\x18\x02 \x01(\tR\x12localInterfaceName\x1aM\n\x10NoLocalIpAddress\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65vice\x1a\xb9\x02\n\x11IpAddressMismatch\x12\x44\n\x0clocal_device\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x0blocalDevice\x12G\n\x10local_ip_address\x18\x02 \x01(\x0b\x32\x1d.com.intentionet.datamodel.IpR\x0elocalIpAddress\x12\x46\n\rremote_device\x18\x03 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x0cremoteDevice\x12M\n\x13remote_peer_address\x18\x04 \x01(\x0b\x32\x1d.com.intentionet.datamodel.IpR\x11remotePeerAddress\x1a\xd0\x02\n\x16SwitchportModeMismatch\x12\x44\n\ninterface1\x18\x01 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface1\x12T\n\x10switchport_mode1\x18\x02 \x01(\x0e\x32).com.intentionet.datamodel.SwitchportModeR\x0fswitchportMode1\x12\x44\n\ninterface2\x18\x03 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface2\x12T\n\x10switchport_mode2\x18\x04 \x01(\x0e\x32).com.intentionet.datamodel.SwitchportModeR\x0fswitchportMode2\x1a\xfa\x02\n\x14\x41llowedVlansMismatch\x12\x44\n\ninterface1\x18\x01 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface1\x12\x44\n\ninterface2\x18\x02 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface2\x12\x46\n\x0c\x63ommon_vlans\x18\x03 \x03(\x0b\x32#.com.intentionet.datamodel.IntRangeR\x0b\x63ommonVlans\x12\x46\n\x0c\x65xtra_vlans1\x18\x04 \x03(\x0b\x32#.com.intentionet.datamodel.IntRangeR\x0b\x65xtraVlans1\x12\x46\n\x0c\x65xtra_vlans2\x18\x05 \x03(\x0b\x32#.com.intentionet.datamodel.IntRangeR\x0b\x65xtraVlans2\x1a\xe6\x01\n\x12NativeVlanMismatch\x12\x44\n\ninterface1\x18\x01 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface1\x12!\n\x0cnative_vlan1\x18\x02 \x01(\rR\x0bnativeVlan1\x12\x44\n\ninterface2\x18\x03 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface2\x12!\n\x0cnative_vlan2\x18\x04 \x01(\rR\x0bnativeVlan2\x1a\xe6\x01\n\x12\x41\x63\x63\x65ssVlanMismatch\x12\x44\n\ninterface1\x18\x01 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface1\x12!\n\x0c\x61\x63\x63\x65ss_vlan1\x18\x02 \x01(\rR\x0b\x61\x63\x63\x65ssVlan1\x12\x44\n\ninterface2\x18\x03 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\ninterface2\x12!\n\x0c\x61\x63\x63\x65ss_vlan2\x18\x04 \x01(\rR\x0b\x61\x63\x63\x65ssVlan2\x1a\xfa\x01\n\x0fMlagIdsMismatch\x12;\n\x07\x64\x65vice1\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice1\x12;\n\x07\x64\x65vice2\x18\x02 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x07\x64\x65vice2\x12\x1d\n\ncommon_ids\x18\x03 \x03(\rR\tcommonIds\x12&\n\x0f\x65xtra_mlag_ids1\x18\x04 \x03(\rR\rextraMlagIds1\x12&\n\x0f\x65xtra_mlag_ids2\x18\x05 \x03(\rR\rextraMlagIds2\x1a^\n\x18PeerLinkIsNotPortChannel\x12\x42\n\tinterface\x18\x01 \x01(\x0b\x32$.com.intentionet.datamodel.InterfaceR\tinterface\x1aW\n\x1aNoLocalInterfaceConfigured\x12\x39\n\x06\x64\x65vice\x18\x01 \x01(\x0b\x32!.com.intentionet.datamodel.DeviceR\x06\x64\x65viceb\x06proto3')



_ARISTAMLAGANALYZERASSERTIONINPUT = DESCRIPTOR.message_types_by_name['AristaMlagAnalyzerAssertionInput']
_ARISTAMLAGANALYZERASSERTIONRESULT = DESCRIPTOR.message_types_by_name['AristaMlagAnalyzerAssertionResult']
_ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATOR = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['Violator']
_ARISTAMLAGANALYZERASSERTIONRESULT_CONFORMER = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['Conformer']
_ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATION = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['Violation']
_ARISTAMLAGANALYZERASSERTIONRESULT_PAIREDDEVICESVIOLATION = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['PairedDevicesViolation']
_ARISTAMLAGANALYZERASSERTIONRESULT_PROBLEM = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['Problem']
_ARISTAMLAGANALYZERASSERTIONRESULT_MORETHANTWODEVICES = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['MoreThanTwoDevices']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOREMOTEDEVICE = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoRemoteDevice']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERADDRESS = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoPeerAddress']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACECONFIGURED = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoPeerInterfaceConfigured']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACEEXISTS = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoPeerInterfaceExists']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACEEXISTS = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoLocalInterfaceExists']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALIPADDRESS = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoLocalIpAddress']
_ARISTAMLAGANALYZERASSERTIONRESULT_IPADDRESSMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['IpAddressMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_SWITCHPORTMODEMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['SwitchportModeMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_ALLOWEDVLANSMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['AllowedVlansMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_NATIVEVLANMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NativeVlanMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_ACCESSVLANMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['AccessVlanMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_MLAGIDSMISMATCH = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['MlagIdsMismatch']
_ARISTAMLAGANALYZERASSERTIONRESULT_PEERLINKISNOTPORTCHANNEL = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['PeerLinkIsNotPortChannel']
_ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACECONFIGURED = _ARISTAMLAGANALYZERASSERTIONRESULT.nested_types_by_name['NoLocalInterfaceConfigured']
AristaMlagAnalyzerAssertionInput = _reflection.GeneratedProtocolMessageType('AristaMlagAnalyzerAssertionInput', (_message.Message,), {
  'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONINPUT,
  '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionInput)
  })
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionInput)

AristaMlagAnalyzerAssertionResult = _reflection.GeneratedProtocolMessageType('AristaMlagAnalyzerAssertionResult', (_message.Message,), {

  'Violator' : _reflection.GeneratedProtocolMessageType('Violator', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATOR,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.Violator)
    })
  ,

  'Conformer' : _reflection.GeneratedProtocolMessageType('Conformer', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_CONFORMER,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.Conformer)
    })
  ,

  'Violation' : _reflection.GeneratedProtocolMessageType('Violation', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATION,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.Violation)
    })
  ,

  'PairedDevicesViolation' : _reflection.GeneratedProtocolMessageType('PairedDevicesViolation', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_PAIREDDEVICESVIOLATION,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.PairedDevicesViolation)
    })
  ,

  'Problem' : _reflection.GeneratedProtocolMessageType('Problem', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_PROBLEM,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.Problem)
    })
  ,

  'MoreThanTwoDevices' : _reflection.GeneratedProtocolMessageType('MoreThanTwoDevices', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_MORETHANTWODEVICES,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.MoreThanTwoDevices)
    })
  ,

  'NoRemoteDevice' : _reflection.GeneratedProtocolMessageType('NoRemoteDevice', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOREMOTEDEVICE,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoRemoteDevice)
    })
  ,

  'NoPeerAddress' : _reflection.GeneratedProtocolMessageType('NoPeerAddress', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERADDRESS,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerAddress)
    })
  ,

  'NoPeerInterfaceConfigured' : _reflection.GeneratedProtocolMessageType('NoPeerInterfaceConfigured', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACECONFIGURED,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerInterfaceConfigured)
    })
  ,

  'NoPeerInterfaceExists' : _reflection.GeneratedProtocolMessageType('NoPeerInterfaceExists', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACEEXISTS,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoPeerInterfaceExists)
    })
  ,

  'NoLocalInterfaceExists' : _reflection.GeneratedProtocolMessageType('NoLocalInterfaceExists', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACEEXISTS,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalInterfaceExists)
    })
  ,

  'NoLocalIpAddress' : _reflection.GeneratedProtocolMessageType('NoLocalIpAddress', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALIPADDRESS,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalIpAddress)
    })
  ,

  'IpAddressMismatch' : _reflection.GeneratedProtocolMessageType('IpAddressMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_IPADDRESSMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.IpAddressMismatch)
    })
  ,

  'SwitchportModeMismatch' : _reflection.GeneratedProtocolMessageType('SwitchportModeMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_SWITCHPORTMODEMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.SwitchportModeMismatch)
    })
  ,

  'AllowedVlansMismatch' : _reflection.GeneratedProtocolMessageType('AllowedVlansMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_ALLOWEDVLANSMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.AllowedVlansMismatch)
    })
  ,

  'NativeVlanMismatch' : _reflection.GeneratedProtocolMessageType('NativeVlanMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NATIVEVLANMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NativeVlanMismatch)
    })
  ,

  'AccessVlanMismatch' : _reflection.GeneratedProtocolMessageType('AccessVlanMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_ACCESSVLANMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.AccessVlanMismatch)
    })
  ,

  'MlagIdsMismatch' : _reflection.GeneratedProtocolMessageType('MlagIdsMismatch', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_MLAGIDSMISMATCH,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.MlagIdsMismatch)
    })
  ,

  'PeerLinkIsNotPortChannel' : _reflection.GeneratedProtocolMessageType('PeerLinkIsNotPortChannel', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_PEERLINKISNOTPORTCHANNEL,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.PeerLinkIsNotPortChannel)
    })
  ,

  'NoLocalInterfaceConfigured' : _reflection.GeneratedProtocolMessageType('NoLocalInterfaceConfigured', (_message.Message,), {
    'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACECONFIGURED,
    '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
    # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult.NoLocalInterfaceConfigured)
    })
  ,
  'DESCRIPTOR' : _ARISTAMLAGANALYZERASSERTIONRESULT,
  '__module__' : 'intentionet.bfe.proto.assertions.mlag_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.bfe.assertions.AristaMlagAnalyzerAssertionResult)
  })
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.Violator)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.Conformer)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.Violation)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.PairedDevicesViolation)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.Problem)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.MoreThanTwoDevices)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoRemoteDevice)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoPeerAddress)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoPeerInterfaceConfigured)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoPeerInterfaceExists)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoLocalInterfaceExists)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoLocalIpAddress)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.IpAddressMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.SwitchportModeMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.AllowedVlansMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NativeVlanMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.AccessVlanMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.MlagIdsMismatch)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.PeerLinkIsNotPortChannel)
_sym_db.RegisterMessage(AristaMlagAnalyzerAssertionResult.NoLocalInterfaceConfigured)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _ARISTAMLAGANALYZERASSERTIONINPUT._serialized_start=274
  _ARISTAMLAGANALYZERASSERTIONINPUT._serialized_end=308
  _ARISTAMLAGANALYZERASSERTIONRESULT._serialized_start=311
  _ARISTAMLAGANALYZERASSERTIONRESULT._serialized_end=6132
  _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATOR._serialized_start=564
  _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATOR._serialized_end=753
  _ARISTAMLAGANALYZERASSERTIONRESULT_CONFORMER._serialized_start=756
  _ARISTAMLAGANALYZERASSERTIONRESULT_CONFORMER._serialized_end=927
  _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATION._serialized_start=930
  _ARISTAMLAGANALYZERASSERTIONRESULT_VIOLATION._serialized_end=1366
  _ARISTAMLAGANALYZERASSERTIONRESULT_PAIREDDEVICESVIOLATION._serialized_start=1369
  _ARISTAMLAGANALYZERASSERTIONRESULT_PAIREDDEVICESVIOLATION._serialized_end=1618
  _ARISTAMLAGANALYZERASSERTIONRESULT_PROBLEM._serialized_start=1621
  _ARISTAMLAGANALYZERASSERTIONRESULT_PROBLEM._serialized_end=3520
  _ARISTAMLAGANALYZERASSERTIONRESULT_MORETHANTWODEVICES._serialized_start=3522
  _ARISTAMLAGANALYZERASSERTIONRESULT_MORETHANTWODEVICES._serialized_end=3603
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOREMOTEDEVICE._serialized_start=3605
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOREMOTEDEVICE._serialized_end=3680
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERADDRESS._serialized_start=3682
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERADDRESS._serialized_end=3756
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACECONFIGURED._serialized_start=3758
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACECONFIGURED._serialized_end=3844
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACEEXISTS._serialized_start=3847
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOPEERINTERFACEEXISTS._serialized_end=3977
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACEEXISTS._serialized_start=3980
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACEEXISTS._serialized_end=4113
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALIPADDRESS._serialized_start=4115
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALIPADDRESS._serialized_end=4192
  _ARISTAMLAGANALYZERASSERTIONRESULT_IPADDRESSMISMATCH._serialized_start=4195
  _ARISTAMLAGANALYZERASSERTIONRESULT_IPADDRESSMISMATCH._serialized_end=4508
  _ARISTAMLAGANALYZERASSERTIONRESULT_SWITCHPORTMODEMISMATCH._serialized_start=4511
  _ARISTAMLAGANALYZERASSERTIONRESULT_SWITCHPORTMODEMISMATCH._serialized_end=4847
  _ARISTAMLAGANALYZERASSERTIONRESULT_ALLOWEDVLANSMISMATCH._serialized_start=4850
  _ARISTAMLAGANALYZERASSERTIONRESULT_ALLOWEDVLANSMISMATCH._serialized_end=5228
  _ARISTAMLAGANALYZERASSERTIONRESULT_NATIVEVLANMISMATCH._serialized_start=5231
  _ARISTAMLAGANALYZERASSERTIONRESULT_NATIVEVLANMISMATCH._serialized_end=5461
  _ARISTAMLAGANALYZERASSERTIONRESULT_ACCESSVLANMISMATCH._serialized_start=5464
  _ARISTAMLAGANALYZERASSERTIONRESULT_ACCESSVLANMISMATCH._serialized_end=5694
  _ARISTAMLAGANALYZERASSERTIONRESULT_MLAGIDSMISMATCH._serialized_start=5697
  _ARISTAMLAGANALYZERASSERTIONRESULT_MLAGIDSMISMATCH._serialized_end=5947
  _ARISTAMLAGANALYZERASSERTIONRESULT_PEERLINKISNOTPORTCHANNEL._serialized_start=5949
  _ARISTAMLAGANALYZERASSERTIONRESULT_PEERLINKISNOTPORTCHANNEL._serialized_end=6043
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACECONFIGURED._serialized_start=6045
  _ARISTAMLAGANALYZERASSERTIONRESULT_NOLOCALINTERFACECONFIGURED._serialized_end=6132
# @@protoc_insertion_point(module_scope)
