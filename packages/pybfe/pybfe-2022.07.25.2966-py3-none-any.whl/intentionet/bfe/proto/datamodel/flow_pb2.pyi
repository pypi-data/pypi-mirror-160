"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import intentionet.bfe.proto.datamodel.ip_primitives_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _FlowDisposition:
    ValueType = typing.NewType('ValueType', builtins.int)
    V: typing_extensions.TypeAlias = ValueType
class _FlowDispositionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FlowDisposition.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    FLOW_DISPOSITION_UNKNOWN: _FlowDisposition.ValueType  # 0
    FLOW_DISPOSITION_ACCEPTED: _FlowDisposition.ValueType  # 1
    FLOW_DISPOSITION_DELIVERED_TO_SUBNET: _FlowDisposition.ValueType  # 2
    FLOW_DISPOSITION_EXITS_NETWORK: _FlowDisposition.ValueType  # 3
    FLOW_DISPOSITION_DENIED_IN: _FlowDisposition.ValueType  # 4
    FLOW_DISPOSITION_DENIED_OUT: _FlowDisposition.ValueType  # 5
    FLOW_DISPOSITION_NO_ROUTE: _FlowDisposition.ValueType  # 6
    FLOW_DISPOSITION_NULL_ROUTED: _FlowDisposition.ValueType  # 7
    FLOW_DISPOSITION_NEIGHBOR_UNREACHABLE: _FlowDisposition.ValueType  # 8
    FLOW_DISPOSITION_LOOP: _FlowDisposition.ValueType  # 9
    FLOW_DISPOSITION_INSUFFICIENT_INFO: _FlowDisposition.ValueType  # 10
class FlowDisposition(_FlowDisposition, metaclass=_FlowDispositionEnumTypeWrapper):
    pass

FLOW_DISPOSITION_UNKNOWN: FlowDisposition.ValueType  # 0
FLOW_DISPOSITION_ACCEPTED: FlowDisposition.ValueType  # 1
FLOW_DISPOSITION_DELIVERED_TO_SUBNET: FlowDisposition.ValueType  # 2
FLOW_DISPOSITION_EXITS_NETWORK: FlowDisposition.ValueType  # 3
FLOW_DISPOSITION_DENIED_IN: FlowDisposition.ValueType  # 4
FLOW_DISPOSITION_DENIED_OUT: FlowDisposition.ValueType  # 5
FLOW_DISPOSITION_NO_ROUTE: FlowDisposition.ValueType  # 6
FLOW_DISPOSITION_NULL_ROUTED: FlowDisposition.ValueType  # 7
FLOW_DISPOSITION_NEIGHBOR_UNREACHABLE: FlowDisposition.ValueType  # 8
FLOW_DISPOSITION_LOOP: FlowDisposition.ValueType  # 9
FLOW_DISPOSITION_INSUFFICIENT_INFO: FlowDisposition.ValueType  # 10
global___FlowDisposition = FlowDisposition


class IcmpHeader(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ICMP_TYPE_FIELD_NUMBER: builtins.int
    ICMP_CODE_FIELD_NUMBER: builtins.int
    APP_NAME_FIELD_NUMBER: builtins.int
    @property
    def icmp_type(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.IcmpType: ...
    @property
    def icmp_code(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.IcmpCode: ...
    app_name: typing.Text
    def __init__(self,
        *,
        icmp_type: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.IcmpType] = ...,
        icmp_code: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.IcmpCode] = ...,
        app_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["icmp_code",b"icmp_code","icmp_type",b"icmp_type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["app_name",b"app_name","icmp_code",b"icmp_code","icmp_type",b"icmp_type"]) -> None: ...
global___IcmpHeader = IcmpHeader

class TcpHeader(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SRC_PORT_FIELD_NUMBER: builtins.int
    DST_PORT_FIELD_NUMBER: builtins.int
    TCP_FLAGS_FIELD_NUMBER: builtins.int
    @property
    def src_port(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port: ...
    @property
    def dst_port(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port: ...
    @property
    def tcp_flags(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.TcpFlags: ...
    def __init__(self,
        *,
        src_port: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port] = ...,
        dst_port: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port] = ...,
        tcp_flags: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.TcpFlags] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dst_port",b"dst_port","src_port",b"src_port","tcp_flags",b"tcp_flags"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dst_port",b"dst_port","src_port",b"src_port","tcp_flags",b"tcp_flags"]) -> None: ...
global___TcpHeader = TcpHeader

class UdpHeader(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    SRC_PORT_FIELD_NUMBER: builtins.int
    DST_PORT_FIELD_NUMBER: builtins.int
    @property
    def src_port(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port: ...
    @property
    def dst_port(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port: ...
    def __init__(self,
        *,
        src_port: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port] = ...,
        dst_port: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Port] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dst_port",b"dst_port","src_port",b"src_port"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dst_port",b"dst_port","src_port",b"src_port"]) -> None: ...
global___UdpHeader = UdpHeader

class Flow(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    INGRESS_INTERFACE_FIELD_NUMBER: builtins.int
    INGRESS_NODE_FIELD_NUMBER: builtins.int
    INGRESS_VRF_FIELD_NUMBER: builtins.int
    SRC_IP_FIELD_NUMBER: builtins.int
    DST_IP_FIELD_NUMBER: builtins.int
    DSCP_FIELD_NUMBER: builtins.int
    ECN_FIELD_NUMBER: builtins.int
    FRAGMENT_OFFSET_FIELD_NUMBER: builtins.int
    PACKET_LENGTH_FIELD_NUMBER: builtins.int
    IP_PROTOCOL_FIELD_NUMBER: builtins.int
    ICMP_FIELD_NUMBER: builtins.int
    TCP_FIELD_NUMBER: builtins.int
    UDP_FIELD_NUMBER: builtins.int
    ingress_interface: typing.Text
    ingress_node: typing.Text
    ingress_vrf: typing.Text
    @property
    def src_ip(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip: ...
    @property
    def dst_ip(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip: ...
    dscp: builtins.int
    ecn: builtins.int
    fragment_offset: builtins.int
    packet_length: builtins.int
    @property
    def ip_protocol(self) -> intentionet.bfe.proto.datamodel.ip_primitives_pb2.IpProtocol: ...
    @property
    def icmp(self) -> global___IcmpHeader: ...
    @property
    def tcp(self) -> global___TcpHeader: ...
    @property
    def udp(self) -> global___UdpHeader: ...
    def __init__(self,
        *,
        ingress_interface: typing.Text = ...,
        ingress_node: typing.Text = ...,
        ingress_vrf: typing.Text = ...,
        src_ip: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip] = ...,
        dst_ip: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.Ip] = ...,
        dscp: builtins.int = ...,
        ecn: builtins.int = ...,
        fragment_offset: builtins.int = ...,
        packet_length: builtins.int = ...,
        ip_protocol: typing.Optional[intentionet.bfe.proto.datamodel.ip_primitives_pb2.IpProtocol] = ...,
        icmp: typing.Optional[global___IcmpHeader] = ...,
        tcp: typing.Optional[global___TcpHeader] = ...,
        udp: typing.Optional[global___UdpHeader] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["dst_ip",b"dst_ip","icmp",b"icmp","ip_protocol",b"ip_protocol","protocol_header",b"protocol_header","src_ip",b"src_ip","tcp",b"tcp","udp",b"udp"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["dscp",b"dscp","dst_ip",b"dst_ip","ecn",b"ecn","fragment_offset",b"fragment_offset","icmp",b"icmp","ingress_interface",b"ingress_interface","ingress_node",b"ingress_node","ingress_vrf",b"ingress_vrf","ip_protocol",b"ip_protocol","packet_length",b"packet_length","protocol_header",b"protocol_header","src_ip",b"src_ip","tcp",b"tcp","udp",b"udp"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["protocol_header",b"protocol_header"]) -> typing.Optional[typing_extensions.Literal["icmp","tcp","udp"]]: ...
global___Flow = Flow
