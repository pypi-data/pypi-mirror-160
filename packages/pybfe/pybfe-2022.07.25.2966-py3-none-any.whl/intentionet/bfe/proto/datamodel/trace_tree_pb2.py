# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: intentionet/bfe/proto/datamodel/trace_tree.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n0intentionet/bfe/proto/datamodel/trace_tree.proto\x12\x19\x63om.intentionet.datamodel\"e\n\x0cLinkFragment\x12\x12\n\x04text\x18\x01 \x01(\tR\x04text\x12\x41\n\x05vs_id\x18\x02 \x01(\x0b\x32,.com.intentionet.datamodel.VendorStructureIdR\x04vsId\"~\n\x11VendorStructureId\x12\x1b\n\tfile_name\x18\x01 \x01(\tR\x08\x66ileName\x12%\n\x0estructure_type\x18\x02 \x01(\tR\rstructureType\x12%\n\x0estructure_name\x18\x03 \x01(\tR\rstructureName\"\x92\x01\n\rTraceFragment\x12)\n\x0fstring_fragment\x18\x01 \x01(\tH\x00R\x0estringFragment\x12N\n\rlink_fragment\x18\x02 \x01(\x0b\x32\'.com.intentionet.datamodel.LinkFragmentH\x00R\x0clinkFragmentB\x06\n\x04type\"\x9b\x01\n\tTraceTree\x12L\n\rtrace_element\x18\x01 \x01(\x0b\x32\'.com.intentionet.datamodel.TraceElementR\x0ctraceElement\x12@\n\x08\x63hildren\x18\x02 \x03(\x0b\x32$.com.intentionet.datamodel.TraceTreeR\x08\x63hildren\"a\n\x0cTraceElement\x12Q\n\x0ftrace_fragments\x18\x01 \x03(\x0b\x32(.com.intentionet.datamodel.TraceFragmentR\x0etraceFragmentsB\x02P\x01\x62\x06proto3')



_LINKFRAGMENT = DESCRIPTOR.message_types_by_name['LinkFragment']
_VENDORSTRUCTUREID = DESCRIPTOR.message_types_by_name['VendorStructureId']
_TRACEFRAGMENT = DESCRIPTOR.message_types_by_name['TraceFragment']
_TRACETREE = DESCRIPTOR.message_types_by_name['TraceTree']
_TRACEELEMENT = DESCRIPTOR.message_types_by_name['TraceElement']
LinkFragment = _reflection.GeneratedProtocolMessageType('LinkFragment', (_message.Message,), {
  'DESCRIPTOR' : _LINKFRAGMENT,
  '__module__' : 'intentionet.bfe.proto.datamodel.trace_tree_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.LinkFragment)
  })
_sym_db.RegisterMessage(LinkFragment)

VendorStructureId = _reflection.GeneratedProtocolMessageType('VendorStructureId', (_message.Message,), {
  'DESCRIPTOR' : _VENDORSTRUCTUREID,
  '__module__' : 'intentionet.bfe.proto.datamodel.trace_tree_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.VendorStructureId)
  })
_sym_db.RegisterMessage(VendorStructureId)

TraceFragment = _reflection.GeneratedProtocolMessageType('TraceFragment', (_message.Message,), {
  'DESCRIPTOR' : _TRACEFRAGMENT,
  '__module__' : 'intentionet.bfe.proto.datamodel.trace_tree_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.TraceFragment)
  })
_sym_db.RegisterMessage(TraceFragment)

TraceTree = _reflection.GeneratedProtocolMessageType('TraceTree', (_message.Message,), {
  'DESCRIPTOR' : _TRACETREE,
  '__module__' : 'intentionet.bfe.proto.datamodel.trace_tree_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.TraceTree)
  })
_sym_db.RegisterMessage(TraceTree)

TraceElement = _reflection.GeneratedProtocolMessageType('TraceElement', (_message.Message,), {
  'DESCRIPTOR' : _TRACEELEMENT,
  '__module__' : 'intentionet.bfe.proto.datamodel.trace_tree_pb2'
  # @@protoc_insertion_point(class_scope:com.intentionet.datamodel.TraceElement)
  })
_sym_db.RegisterMessage(TraceElement)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'P\001'
  _LINKFRAGMENT._serialized_start=79
  _LINKFRAGMENT._serialized_end=180
  _VENDORSTRUCTUREID._serialized_start=182
  _VENDORSTRUCTUREID._serialized_end=308
  _TRACEFRAGMENT._serialized_start=311
  _TRACEFRAGMENT._serialized_end=457
  _TRACETREE._serialized_start=460
  _TRACETREE._serialized_end=615
  _TRACEELEMENT._serialized_start=617
  _TRACEELEMENT._serialized_end=714
# @@protoc_insertion_point(module_scope)
