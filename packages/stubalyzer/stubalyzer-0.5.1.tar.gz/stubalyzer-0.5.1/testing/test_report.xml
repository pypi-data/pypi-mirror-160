<?xml version='1.0' encoding='UTF-8'?>
<checkstyle version="4.3"><file name="{path}/testing/stubs-handwritten/classes.pyi"><error column="4" line="15" message="&#10;Found symbol &quot;classes.ClassWithoutSuperClassInHandwritten.a_method&quot; in different location &quot;classes.AClass.a_method&quot;." severity="error" /><error column="0" line="18" message="&#10;Symbol &quot;classes.MissingClass&quot; not found in generated stubs" severity="error" /><error column="4" line="35" message="&#10;Types for classes.ClassWithInvalidCustomStub.argument_order_wrong do not match:&#10;    Handwritten type: def (self: classes.ClassWithInvalidCustomStub, bar: builtins.str, foo: builtins.int) -&gt; builtins.int&#10;    Reference type  : def (self: classes.ClassWithInvalidCustomStub, foo: Any, bar: Any) -&gt; Any" severity="error" /><error column="4" line="36" message="&#10;Types for classes.ClassWithInvalidCustomStub.argument_names_wrong do not match:&#10;    Handwritten type: def (self: classes.ClassWithInvalidCustomStub, foor: builtins.int, bart: builtins.str) -&gt; builtins.str&#10;    Reference type  : def (self: classes.ClassWithInvalidCustomStub, foo: Any, bar: Any) -&gt; Any" severity="error" /><error column="4" line="37" message="&#10;Types for classes.ClassWithInvalidCustomStub.argument_types_wrong do not match:&#10;    Handwritten type: def (self: classes.ClassWithInvalidCustomStub, foo: builtins.str, bar: builtins.bool) -&gt; builtins.bool&#10;    Reference type  : def (self: classes.ClassWithInvalidCustomStub, foo: builtins.int, bar: builtins.str) -&gt; Any" severity="error" /><error column="4" line="39" message="&#10;Types for classes.ClassWithInvalidCustomStub.return_type_wrong do not match:&#10;    Handwritten type: def (self: classes.ClassWithInvalidCustomStub, foo: builtins.int, bar: builtins.str) -&gt; builtins.str&#10;    Reference type  : def (self: classes.ClassWithInvalidCustomStub, foo: builtins.int, bar: builtins.str) -&gt; builtins.bool" severity="error" /></file><file name="{path}/testing/stubs-handwritten/functions.pyi"><error column="0" line="6" message="&#10;Types for functions.additional_args do not match:&#10;    Handwritten type: def (foo: builtins.int, bar: builtins.int) -&gt; builtins.str&#10;    Reference type  : def (foo: builtins.int) -&gt; builtins.str" severity="error" /><error column="0" line="7" message="&#10;Types for functions.additional_optional_args do not match:&#10;    Handwritten type: def (foo: builtins.int, bar: builtins.int =) -&gt; builtins.str&#10;    Reference type  : def (foo: builtins.int) -&gt; Any" severity="error" /><error column="0" line="9" message="&#10;Types for functions.matching_with_missing_arg_star do not match:&#10;    Handwritten type: def (foo: Any, bar: Any) -&gt; Any&#10;    Reference type  : def (foo: Any, bar: Any, *args: Any) -&gt; Any" severity="error" /><error column="0" line="10" message="&#10;Types for functions.mismatching_with_arg_star do not match:&#10;    Handwritten type: def (foo: builtins.int, *args: Any) -&gt; Any&#10;    Reference type  : def (foo: Any, bar: Any, *args: Any) -&gt; Any" severity="error" /><error column="0" line="11" message="&#10;Types for functions.mismatching_with_additional_arg_star do not match:&#10;    Handwritten type: def (foo: builtins.int, *args: builtins.str) -&gt; Any&#10;    Reference type  : def (foo: Any) -&gt; Any" severity="error" /><error column="0" line="13" message="&#10;Types for functions.matching_with_missing_kwarg_star2 do not match:&#10;    Handwritten type: def (foo: Any, bar: Any) -&gt; Any&#10;    Reference type  : def (foo: Any, bar: Any, **kwargs: Any) -&gt; Any" severity="error" /><error column="0" line="14" message="&#10;Types for functions.mismatching_with_kwarg_star2 do not match:&#10;    Handwritten type: def (foo: builtins.int, **kwargs: Any) -&gt; Any&#10;    Reference type  : def (foo: Any, bar: Any, **kwargs: Any) -&gt; Any" severity="error" /><error column="0" line="15" message="&#10;Types for functions.mismatching_with_additional_kwarg_star2 do not match:&#10;    Handwritten type: def (foo: builtins.int, **kwargs: Any) -&gt; Any&#10;    Reference type  : def (foo: Any) -&gt; Any" severity="error" /><error column="0" line="16" message="&#10;Symbol &quot;functions.missing_function&quot; not found in generated stubs" severity="error" /><error column="0" line="17" message="&#10;Arguments don't match." severity="error" /><error column="0" line="18" message="&#10;Types for functions.mismatching_with_zero_parameters do not match:&#10;    Handwritten type: def (foo: builtins.str) -&gt; Any&#10;    Reference type  : def () -&gt; Any" severity="error" /><error column="1" line="21" message="&#10;Types for functions.overloaded_additional_args do not match:&#10;    Handwritten type: Overload(def (foo: builtins.str, bar: builtins.str) -&gt; builtins.str, def (foo: builtins.int, bar: builtins.int) -&gt; builtins.int)&#10;    Reference type  : Overload(def (foo: builtins.str) -&gt; Any, def (foo: builtins.int, bar: builtins.int) -&gt; Any)" severity="error" /><error column="1" line="25" message="&#10;Types for functions.overloaded_additional_optional_args do not match:&#10;    Handwritten type: Overload(def (foo: builtins.str, bar: builtins.str =) -&gt; builtins.str, def (foo: builtins.int, bar: builtins.int =) -&gt; builtins.int)&#10;    Reference type  : Overload(def (foo: builtins.str) -&gt; Any, def (foo: builtins.int, bar: builtins.int) -&gt; Any)" severity="error" /><error column="1" line="31" message="&#10;Types for functions.decorated_with_additional_args do not match:&#10;    Handwritten type: def (foo: builtins.int, bar: builtins.str) -&gt; builtins.str&#10;    Reference type  : def (foo: Any) -&gt; Any" severity="error" /><error column="1" line="33" message="&#10;Types for functions.decorated_with_additional_optional_args do not match:&#10;    Handwritten type: def (foo: builtins.int, bar: builtins.int =) -&gt; builtins.str&#10;    Reference type  : def (foo: Any) -&gt; Any" severity="error" /></file><file name="{path}/testing/stubs-handwritten/mismatching.pyi"><error column="0" line="1" message="&#10;Types for mismatching.mismatching_function do not match:&#10;    Handwritten type: def (foo: builtins.str) -&gt; Any&#10;    Reference type  : def (foo: builtins.int) -&gt; Any" severity="error" /><error column="0" line="3" message="&#10;Types for mismatching.MISMATCHING_CONSTANT do not match:&#10;    Handwritten type: builtins.str&#10;    Reference type  : builtins.int" severity="error" /><error column="0" line="4" message="&#10;Types for mismatching.mismatch_variable do not match:&#10;    Handwritten type: builtins.int&#10;    Reference type  : builtins.str" severity="error" /><error column="0" line="6" message="&#10;Arguments don't match." severity="error" /></file><file name="{path}/testing/stubs-handwritten/missing.pyi"><error column="0" line="1" message="&#10;Symbol &quot;missing.MISSING_CONSTANT&quot; not found in generated stubs" severity="error" /><error column="0" line="3" message="&#10;Symbol &quot;missing.missing_function&quot; not found in generated stubs" severity="error" /><error column="0" line="5" message="&#10;Symbol &quot;missing.MissingClass&quot; not found in generated stubs" severity="error" /></file><file name="{path}/testing/stubs-handwritten/mypy_node_factory_test_nodes.pyi"><error column="0" line="3" message="&#10;Symbol &quot;mypy_node_factory_test_nodes.not_in_generated&quot; not found in generated stubs" severity="error" /></file><file name="{path}/testing/stubs-handwritten/typevars.pyi"><error column="-1" line="7" message="&#10;Types for typevars.ValuesTypeVarWrongOrder do not match:&#10;    Handwritten type: ValuesTypeVarWrongOrder = TypeVar('ValuesTypeVarWrongOrder', builtins.int, builtins.str, builtins.bool)&#10;    Reference type  : ValuesTypeVarWrongOrder = TypeVar('ValuesTypeVarWrongOrder', builtins.str, builtins.int, builtins.bool)" severity="error" /><error column="-1" line="8" message="&#10;Types for typevars.ValuesTypeVarNoValuesInGenerated do not match:&#10;    Handwritten type: ValuesTypeVarNoValuesInGenerated = TypeVar('ValuesTypeVarNoValuesInGenerated', builtins.int, builtins.str, builtins.bool)&#10;    Reference type  : ValuesTypeVarNoValuesInGenerated = TypeVar('ValuesTypeVarNoValuesInGenerated')" severity="error" /></file><file name="{path}/testing/stubs-handwritten/vars.pyi"><error column="0" line="3" message="&#10;Symbol &quot;vars.any_var&quot; not found in generated stubs" severity="error" /><error column="0" line="4" message="&#10;Symbol &quot;vars.int_var&quot; not found in generated stubs" severity="error" /><error column="0" line="5" message="&#10;Symbol &quot;vars.bool_var&quot; not found in generated stubs" severity="error" /><error column="0" line="6" message="&#10;Symbol &quot;vars.str_var&quot; not found in generated stubs" severity="error" /></file></checkstyle>
