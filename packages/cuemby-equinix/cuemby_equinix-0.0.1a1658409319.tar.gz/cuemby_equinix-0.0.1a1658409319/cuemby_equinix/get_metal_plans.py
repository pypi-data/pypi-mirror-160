# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMetalPlansResult',
    'AwaitableGetMetalPlansResult',
    'get_metal_plans',
    'get_metal_plans_output',
]

@pulumi.output_type
class GetMetalPlansResult:
    """
    A collection of values returned by GetMetalPlans.
    """
    def __init__(__self__, filters=None, id=None, plans=None, sorts=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plans and not isinstance(plans, list):
            raise TypeError("Expected argument 'plans' to be a list")
        pulumi.set(__self__, "plans", plans)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetMetalPlansFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def plans(self) -> Sequence['outputs.GetMetalPlansPlanResult']:
        """
        The ID of the facility
        """
        return pulumi.get(self, "plans")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetMetalPlansSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetMetalPlansResult(GetMetalPlansResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetalPlansResult(
            filters=self.filters,
            id=self.id,
            plans=self.plans,
            sorts=self.sorts)


def get_metal_plans(filters: Optional[Sequence[pulumi.InputType['GetMetalPlansFilterArgs']]] = None,
                    sorts: Optional[Sequence[pulumi.InputType['GetMetalPlansSortArgs']]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetalPlansResult:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetMetalPlansFilterArgs']] filters: One or more attribute/values pairs to filter off of
    :param Sequence[pulumi.InputType['GetMetalPlansSortArgs']] sorts: One or more attribute/direction pairs on which to sort results. If multiple
           sorts are provided, they will be applied in order
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
    __ret__ = pulumi.runtime.invoke('equinix:index/getMetalPlans:GetMetalPlans', __args__, opts=opts, typ=GetMetalPlansResult).value

    return AwaitableGetMetalPlansResult(
        filters=__ret__.filters,
        id=__ret__.id,
        plans=__ret__.plans,
        sorts=__ret__.sorts)


@_utilities.lift_output_func(get_metal_plans)
def get_metal_plans_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetalPlansFilterArgs']]]]] = None,
                           sorts: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMetalPlansSortArgs']]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetalPlansResult]:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetMetalPlansFilterArgs']] filters: One or more attribute/values pairs to filter off of
    :param Sequence[pulumi.InputType['GetMetalPlansSortArgs']] sorts: One or more attribute/direction pairs on which to sort results. If multiple
           sorts are provided, they will be applied in order
    """
    ...
