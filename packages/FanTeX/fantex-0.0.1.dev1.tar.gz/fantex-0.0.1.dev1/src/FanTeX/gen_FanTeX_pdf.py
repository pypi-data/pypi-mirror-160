import pathlib
from shutil import rmtree
from pylatex import Document, Section, Subsection, Command, Package
from pylatex.base_classes import Environment, Arguments, Options
from pylatex.utils import NoEscape


class Minted(Environment):
    _latex_name = "minted"
    packages = [Package("minted")]
    _escape = False
    content_separator = "\n"

    def __init__(self, language="python"):
        options = Options("linenos", NoEscape(r"fontsize=\footnotesize"))
        arguments = Arguments(language)
        super().__init__(options=options, arguments=arguments)


class Abstract(Environment):
    _latex_name = "abstract"


def _(doc, text):
    doc.append(NoEscape(text))


def doc_abstract(doc):
    with doc.create(Abstract()):
        doc.append(Command("noindent"))
        _(
            doc,
            r"FanTeX is a simple editor for writing professional academic\
            papers based on \LaTeX. The objective is to let researchers focus\
            on content production by hiding the messy details of composing\
            TeX files.",
        )


def doc_introduction(doc):
    doc.append(Command("clearpage"))
    with doc.create(Section("Introduction")):
        _(
            doc,
            r"FanTeX is a simple editor made for writing professional\
            academic papers based on \LaTeX. It is developed by\
            \href{https://mingze-gao.com}{Dr. Mingze Gao}\
            from the University of Sydney during his postdoctoral fellowship.\
            The program is written in Python and Qt6 and open-sourced on\
            GitHub.\footnote{GitHub repo: \url{https://github.com/mgao6767/FanTeX}}\
            Interestingly, this PDF file is compiled from tex generated by\
            \mintinline{python}{PyLaTeX} in pure Python. The source code is\
            available in Appendix \ref{subsec:sourcecode}.",
        )


def doc_appendix(doc):
    # Embedd this Python code to the tex file
    doc.append(Command("clearpage"))
    doc.append(Command("appendix"))
    with doc.create(Section("Appendix", label="appendix")):
        with doc.create(Subsection("Source code", label="sourcecode")):
            doc.append("The code to generate this file is as below.")
            doc.append(Command("singlespacing"))
            with doc.create(Minted()) as minted:
                minted.append(open(__file__).read())


def main(output_path="."):

    filename = "FanTeX"
    geometry_options = {"margin": "1in"}
    doc = Document(geometry_options=geometry_options)
    doc.documentclass = Command(
        "documentclass", options=["12pt"], arguments=["article"]
    )
    doc.content_separator = "\n"
    doc.packages.append(Package("minted"))
    doc.packages.append(Package("setspace"))
    doc.packages.append(Package("indentfirst"))
    # hyperref must be loaded last to avoid breaking the PDF bookmark hierarchy
    doc.packages.append(Package("hyperref"))
    doc.preamble.append(
        Command(
            "hypersetup",
            "colorlinks, citecolor=blue, linkcolor=blue, urlcolor=blue",
        )
    )
    doc.preamble.append(
        Command(
            "newcommand",
            options=["1"],
            arguments=[NoEscape("\email")],
            extra_arguments=NoEscape("{\href{mailto:#1}{#1}}"),
        )
    )
    fn = r"\footnotetext{Mingze Gao: University of Sydney Business School, \
        University of Sydney, NSW 2006 Australia; \
        Email: \email{mingze.gao@sydney.edu.au}.}"
    doc.preamble.append(Command("title", NoEscape(rf"FanTeX{fn}")))
    doc.preamble.append(Command("author", "Mingze Gao"))
    doc.append(NoEscape(r"\maketitle"))

    # Abstract
    doc_abstract(doc)

    doc.append(Command("doublespacing"))
    # Introduction
    doc_introduction(doc)
    # Appendix
    doc_appendix(doc)

    # Compile the PDF
    doc.generate_pdf(
        pathlib.Path(output_path).joinpath(filename),
        clean=True,
        clean_tex=False,
        compiler_args=["--shell-escape", "-f"],
    )

    # Remove folder created by minted
    rmtree(pathlib.Path(output_path).joinpath(f"_minted-{filename}"))


if __name__ == "__main__":
    main()
