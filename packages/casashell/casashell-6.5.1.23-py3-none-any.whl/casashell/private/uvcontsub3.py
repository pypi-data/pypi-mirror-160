##################### generated by xml-casa (v2) from uvcontsub3.xml ################
##################### 8a004f1d57e5d12b72cfd52fbffbf5e7 ##############################
from __future__ import absolute_import
from casashell.private.stack_manip import find_local as __sf__
from casashell.private.stack_manip import find_frame as _find_frame
from casatools.typecheck import validator as _pc
from casatools.coercetype import coerce as _coerce
from casatasks import uvcontsub3 as _uvcontsub3_t
from collections import OrderedDict
import numpy
import sys
import os

import shutil

def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate

class _uvcontsub3:
    """
    uvcontsub3 ---- An experimental clone of uvcontsub

    --------- parameter descriptions ---------------------------------------------

    vis         Name of input MS.  Output goes to vis + ".contsub"
    fitspw      Spectral window:channel selection for fitting the continuum
    combine     Data axes to combine for the continuum estimation (none ('') or spw)
    fitorder    Polynomial order for the fits
    field       Select field(s) using id(s) or name(s)
    spw         Spectral window selection for output
    scan        Select data by scan numbers
    intent      Select data by scan intents
    correlation Select correlations
    observation Select by observation ID(s)

    --------- examples -----------------------------------------------------------

    
    
    uvcontsub3 is an experimental clone of uvcontsub with the goal of taking
    less time and temporary disk space.
    
    Continuum fitting and subtraction in the uv plane:
    
    This task estimates the continuum emission by fitting polynomials to
    the real and imaginary parts of the spectral windows and channels
    selected by fitspw.  This fit represents a model of the continuum in
    all channels.
    
    The fitted continuum spectrum is subtracted from all channels
    selected in spw, and the result (presumably only line emission)
    is stored in a new MS (vis + ".contsub").
    It will read from the CORRECTED_DATA column of vis if it is present,
    or DATA if it is not.  Whichever column is read is presumed to have
    already been calibrated.
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none; example: vis='ngc5921.ms'
    
    fitspw -- Selection of spectral windows and channels to use in the
    fit for the continuum, using general spw:chan syntax.
    See the note under combine.
    default: '' (all)
    example: fitspw='0:5~30;40~55'
    
    combine -- Let the continuum estimation span multiple spectral windows.
    default = '' (Make separate estimates for each spw.)
    combine = 'spw': Necessary when one or more of the spws are
    completely blanketed by lines, so the estimate
    must be made in different spws.
    
    fitorder -- Polynomial order for the fits of the continuum w.r.t.
    frequency.  fitorders > 1 are strongly discouraged
    because high order polynomials have more flexibility, may
    absorb line emission, and tend go wild at the edges of
    fitspw, which is not what you want.
    
    default: 0 (constant); example: fitorder=1
    
    field -- Field selection for continuum estimation and subtraction.
    The estimation and subtraction is done for each selected field
    in turn.  (Run listobs to get lists of the ID and names.)
    default: ''=all fields.  If the field string is a non-negative
    integer, it is assumed to be a field index
    otherwise, it is assumed to be a field name
    field='0~2'; field ids 0,1,2
    field='0,4,5~7'; field ids 0,4,5,6,7
    field='3C286,3C295'; fields named 3C286 and 3C295
    field = '3,4C*'; field id 3, all names starting with 4C
    
    spw -- Select spectral windows for the output.
    default: ''=all spectral windows
    N.B. uvcontsub3 does not yet support exclusion by channels for
    the output.  Meanwhile, use split to further reduce the size
    of the output MS if desired.
    spw='0~2,4'; spectral windows 0,1,2,4
    spw='<2';  spectral windows less than 2 (i.e. 0,1)
    
    scan -- Scan number range
    default: ''=all
    
    intent -- Select by scan intent (state).  Case sensitive.
    default: '' = all
    Examples:
    intent = 'CALIBRATE_ATMOSPHERE_REFERENCE'
    intent = 'calibrate_atmosphere_reference'.upper() # same as above
    # Select states that include one or both of CALIBRATE_WVR.REFERENCE
    # or OBSERVE_TARGET_ON_SOURCE.
    intent = 'CALIBRATE_WVR.REFERENCE, OBSERVE_TARGET_ON_SOURCE'
    
    correlation -- Select correlations, e.g. 'rr, ll' or ['XY', 'YX'].
    default '' (all).
    
    observation -- Select by observation ID(s).
    default: '' = all


    """

    _info_group_ = """manipulation"""
    _info_desc_ = """An experimental clone of uvcontsub"""

    __schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'fitspw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'combine': {'type': 'cStr', 'coerce': _coerce.to_str}, 'fitorder': {'type': 'cInt'}, 'field': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}, {'type': 'cInt'}, {'type': 'cIntVec', 'coerce': [_coerce.to_list,_coerce.to_intvec]}]}, 'spw': {'type': 'cStr', 'coerce': _coerce.to_str}, 'scan': {'type': 'cStr', 'coerce': _coerce.to_str}, 'intent': {'type': 'cStr', 'coerce': _coerce.to_str}, 'correlation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cStrVec', 'coerce': [_coerce.to_list,_coerce.to_strvec]}]}, 'observation': {'anyof': [{'type': 'cStr', 'coerce': _coerce.to_str}, {'type': 'cInt'}]}}

    def __init__(self):
        self.__stdout = None
        self.__stderr = None
        self.__root_frame_ = None

    def __globals_(self):
        if self.__root_frame_ is None:
            self.__root_frame_ = _find_frame( )
            assert self.__root_frame_ is not None, "could not find CASAshell global frame"
        return self.__root_frame_

    def __to_string_(self,value):
        if type(value) is str:
            return "'%s'" % value
        else:
            return str(value)

    def __validate_(self,doc,schema):
        return _pc.validate(doc,schema)

    def __do_inp_output(self,param_prefix,description_str,formatting_chars):
        out = self.__stdout or sys.stdout
        description = description_str.split( )
        prefix_width = 23 + 11 + 4
        output = [ ]
        addon = ''
        first_addon = True
        if len(description) == 0:
            out.write(param_prefix + " #\n")
            return
        while len(description) > 0:
            ## starting a new line.....................................................................
            if len(output) == 0:
                ## for first line add parameter information............................................
                if len(param_prefix)-formatting_chars > prefix_width - 1:
                    output.append(param_prefix)
                    continue
                addon = param_prefix + ' #'
                first_addon = True
                addon_formatting = formatting_chars
            else:
                ## for subsequent lines space over prefix width........................................
                addon = (' ' * prefix_width) + '#'
                first_addon = False
                addon_formatting = 0
            ## if first word of description puts us over the screen width, bail........................
            if len(addon + description[0]) - addon_formatting + 1 > self.term_width:
                ## if we're doing the first line make sure it's output.................................
                if first_addon: output.append(addon)
                break
            while len(description) > 0:
                ## if the next description word puts us over break for the next line...................
                if len(addon + description[0]) - addon_formatting + 1 > self.term_width: break
                addon = addon + ' ' + description[0]
                description.pop(0)
            output.append(addon)
        out.write('\n'.join(output) + '\n')

    #--------- return nonsubparam values ----------------------------------------------

    def __combine_dflt( self, glb ):
        return ''

    def __combine( self, glb ):
        if 'combine' in glb: return glb['combine']
        return ''

    def __fitspw_dflt( self, glb ):
        return ''

    def __fitspw( self, glb ):
        if 'fitspw' in glb: return glb['fitspw']
        return ''

    def __vis_dflt( self, glb ):
        return ''

    def __vis( self, glb ):
        if 'vis' in glb: return glb['vis']
        return ''

    def __correlation_dflt( self, glb ):
        return ''

    def __correlation( self, glb ):
        if 'correlation' in glb: return glb['correlation']
        return ''

    def __spw_dflt( self, glb ):
        return ''

    def __spw( self, glb ):
        if 'spw' in glb: return glb['spw']
        return ''

    def __observation_dflt( self, glb ):
        return ''

    def __observation( self, glb ):
        if 'observation' in glb: return glb['observation']
        return ''

    def __fitorder_dflt( self, glb ):
        return int(0)

    def __fitorder( self, glb ):
        if 'fitorder' in glb: return glb['fitorder']
        return int(0)

    def __scan_dflt( self, glb ):
        return ''

    def __scan( self, glb ):
        if 'scan' in glb: return glb['scan']
        return ''

    def __field_dflt( self, glb ):
        return ''

    def __field( self, glb ):
        if 'field' in glb: return glb['field']
        return ''

    def __intent_dflt( self, glb ):
        return ''

    def __intent( self, glb ):
        if 'intent' in glb: return glb['intent']
        return ''



    #--------- return inp/go default --------------------------------------------------


    #--------- return subparam values -------------------------------------------------


    #--------- subparam inp output ----------------------------------------------------
    def __vis_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__vis_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__vis( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'vis': value},{'vis': self.__schema['vis']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('vis',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fitspw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitspw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__fitspw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitspw': value},{'fitspw': self.__schema['fitspw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('fitspw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __combine_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__combine_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__combine( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'combine': value},{'combine': self.__schema['combine']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('combine',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __fitorder_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__fitorder_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return int(0)
        description = ''
        value = self.__fitorder( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'fitorder': value},{'fitorder': self.__schema['fitorder']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('fitorder',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __field_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__field_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__field( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'field': value},{'field': self.__schema['field']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('field',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __spw_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__spw_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__spw( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'spw': value},{'spw': self.__schema['spw']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('spw',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __scan_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__scan_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__scan( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'scan': value},{'scan': self.__schema['scan']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('scan',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __intent_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__intent_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__intent( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'intent': value},{'intent': self.__schema['intent']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('intent',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __correlation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__correlation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__correlation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'correlation': value},{'correlation': self.__schema['correlation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('correlation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))
    def __observation_inp(self):
        def xml_default( ):
            ## play the crazy subparameter shell game
            dflt = self.__observation_dflt( self.__globals_( ) )
            if dflt is not None: return dflt
            return ''
        description = ''
        value = self.__observation( self.__globals_( ) )
        (pre,post) = (('','') if value == xml_default( ) else ('\x1B[34m','\x1B[0m')) if self.__validate_({'observation': value},{'observation': self.__schema['observation']}) else ('\x1B[91m','\x1B[0m')
        self.__do_inp_output('%-11.11s = %s%-23s%s' % ('observation',pre,self.__to_string_(value),post),description,0+len(pre)+len(post))

    #--------- global default implementation-------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def set_global_defaults(self):
        self.set_global_defaults.state['last'] = self
        glb = self.__globals_( )
        if 'fitspw' in glb: del glb['fitspw']
        if 'field' in glb: del glb['field']
        if 'intent' in glb: del glb['intent']
        if 'scan' in glb: del glb['scan']
        if 'vis' in glb: del glb['vis']
        if 'fitorder' in glb: del glb['fitorder']
        if 'correlation' in glb: del glb['correlation']
        if 'combine' in glb: del glb['combine']
        if 'observation' in glb: del glb['observation']
        if 'spw' in glb: del glb['spw']


    #--------- inp function -----------------------------------------------------------
    def inp(self):
        print("# uvcontsub3 -- %s" % self._info_desc_)
        self.term_width, self.term_height = shutil.get_terminal_size(fallback=(80, 24))
        self.__vis_inp( )
        self.__fitspw_inp( )
        self.__combine_inp( )
        self.__fitorder_inp( )
        self.__field_inp( )
        self.__spw_inp( )
        self.__scan_inp( )
        self.__intent_inp( )
        self.__correlation_inp( )
        self.__observation_inp( )

    #--------- tget function ----------------------------------------------------------
    @static_var('state', __sf__('casa_inp_go_state'))
    def tget(self,savefile=None):
        from casashell.private.stack_manip import find_frame
        from runpy import run_path
        filename = savefile
        if filename is None:
            filename = "uvcontsub3.last" if os.path.isfile("uvcontsub3.last") else "uvcontsub3.saved"
        if os.path.isfile(filename):
            glob = find_frame( )
            newglob = run_path( filename, init_globals={ } )
            for i in newglob:
                glob[i] = newglob[i]
            self.tget.state['last'] = self
        else:
            print("could not find last file: %s\nsetting defaults instead..." % filename)
            self.set_global_defaults( )

    #--------- tput function ----------------------------------------------------------
    def tput(self,outfile=None):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s

        _postfile = outfile if outfile is not None else os.path.realpath('uvcontsub3.last')

        _invocation_parameters = OrderedDict( )
        _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
        _invocation_parameters['fitspw'] = self.__fitspw( self.__globals_( ) )
        _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
        _invocation_parameters['fitorder'] = self.__fitorder( self.__globals_( ) )
        _invocation_parameters['field'] = self.__field( self.__globals_( ) )
        _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
        _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
        _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
        _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
        _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )

        try:
            with open(_postfile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvcontsub3( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: return False
        return True

    def __call__( self, vis=None, fitspw=None, combine=None, fitorder=None, field=None, spw=None, scan=None, intent=None, correlation=None, observation=None ):
        def noobj(s):
           if s.startswith('<') and s.endswith('>'):
               return "None"
           else:
               return s
        _prefile = os.path.realpath('uvcontsub3.pre')
        _postfile = os.path.realpath('uvcontsub3.last')
        _return_result_ = None
        _arguments = [vis,fitspw,combine,fitorder,field,spw,scan,intent,correlation,observation]
        _invocation_parameters = OrderedDict( )
        if any(map(lambda x: x is not None,_arguments)):
            # invoke python style
            # set the non sub-parameters that are not None
            local_global = { }
            if vis is not None: local_global['vis'] = vis
            if fitspw is not None: local_global['fitspw'] = fitspw
            if combine is not None: local_global['combine'] = combine
            if fitorder is not None: local_global['fitorder'] = fitorder
            if field is not None: local_global['field'] = field
            if spw is not None: local_global['spw'] = spw
            if scan is not None: local_global['scan'] = scan
            if intent is not None: local_global['intent'] = intent
            if correlation is not None: local_global['correlation'] = correlation
            if observation is not None: local_global['observation'] = observation

            # the invocation parameters for the non-subparameters can now be set - this picks up those defaults
            _invocation_parameters['vis'] = self.__vis( local_global )
            _invocation_parameters['fitspw'] = self.__fitspw( local_global )
            _invocation_parameters['combine'] = self.__combine( local_global )
            _invocation_parameters['fitorder'] = self.__fitorder( local_global )
            _invocation_parameters['field'] = self.__field( local_global )
            _invocation_parameters['spw'] = self.__spw( local_global )
            _invocation_parameters['scan'] = self.__scan( local_global )
            _invocation_parameters['intent'] = self.__intent( local_global )
            _invocation_parameters['correlation'] = self.__correlation( local_global )
            _invocation_parameters['observation'] = self.__observation( local_global )

            # the sub-parameters can then be set. Use the supplied value if not None, else the function, which gets the appropriate default
            

        else:
            # invoke with inp/go semantics
            _invocation_parameters['vis'] = self.__vis( self.__globals_( ) )
            _invocation_parameters['fitspw'] = self.__fitspw( self.__globals_( ) )
            _invocation_parameters['combine'] = self.__combine( self.__globals_( ) )
            _invocation_parameters['fitorder'] = self.__fitorder( self.__globals_( ) )
            _invocation_parameters['field'] = self.__field( self.__globals_( ) )
            _invocation_parameters['spw'] = self.__spw( self.__globals_( ) )
            _invocation_parameters['scan'] = self.__scan( self.__globals_( ) )
            _invocation_parameters['intent'] = self.__intent( self.__globals_( ) )
            _invocation_parameters['correlation'] = self.__correlation( self.__globals_( ) )
            _invocation_parameters['observation'] = self.__observation( self.__globals_( ) )
        try:
            with open(_prefile,'w') as _f:
                for _i in _invocation_parameters:
                    _f.write("%-11s = %s\n" % (_i,noobj(repr(_invocation_parameters[_i]))))
                _f.write("#uvcontsub3( ")
                count = 0
                for _i in _invocation_parameters:
                    _f.write("%s=%s" % (_i,noobj(repr(_invocation_parameters[_i]))))
                    count += 1
                    if count < len(_invocation_parameters): _f.write(",")
                _f.write(" )\n")
        except: pass
        try:
            _return_result_ = _uvcontsub3_t( _invocation_parameters['vis'],_invocation_parameters['fitspw'],_invocation_parameters['combine'],_invocation_parameters['fitorder'],_invocation_parameters['field'],_invocation_parameters['spw'],_invocation_parameters['scan'],_invocation_parameters['intent'],_invocation_parameters['correlation'],_invocation_parameters['observation'] )
        except Exception as e:
            from traceback import format_exc
            from casatasks import casalog
            casalog.origin('uvcontsub3')
            casalog.post("Exception Reported: Error in uvcontsub3: %s" % str(e),'SEVERE')
            casalog.post(format_exc( ))
            _return_result_ = False
        try:
            os.rename(_prefile,_postfile)
        except: pass
        return _return_result_

uvcontsub3 = _uvcontsub3( )

