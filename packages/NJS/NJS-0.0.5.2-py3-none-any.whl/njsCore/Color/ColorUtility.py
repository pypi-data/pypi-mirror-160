import math

def lab2rgb(L, A, B):
    y = (L + 16) / 116
    x = A / 500 + y
    z = y - B / 200
    r = 0; g = 0; b = 0

    if x * x * x > 0.008856:
        x = (x * x * x ) * 0.95047
    else:
        x = ((x - 16 / 116) / 7.787) * 0.95047
    
    if y * y * y > 0.008856:
        y = (y * y * y ) * 1.00000
    else:
        y = ((y - 16 / 116) / 7.787) * 1.00000  
    
    if z * z * z > 0.008856:
        z = (z * z * z ) * 1.08883
    else:
        z = ((z - 16 / 116) / 7.787) * 1.08883    
    
    r = x *  3.2406 + y * -1.5372 + z * -0.4986
    g = x * -0.9689 + y *  1.8758 + z *  0.0415
    b = x *  0.0557 + y * -0.2040 + z *  1.0570

    if r > 0.0031308:
        r = (1.055 * math.pow(r, 1 / 2.4) - 0.055)
    else:
        r = 12.92 * r  

    if g > 0.0031308:
        g = (1.055 * math.pow(g, 1 / 2.4) - 0.055)
    else:
        g = 12.92 * g 
    
    if b > 0.0031308:
        b = (1.055 * math.pow(g, 1 / 2.4) - 0.055)
    else:
        b = 12.92 * b 
    return [max(0, min(1, r)) * 255, 
            max(0, min(1, g)) * 255, 
            max(0, min(1, b)) * 255]

def rgb2lab(R: float, G: float, B: float):
    r = R / 255
    g = G / 255
    b = B / 255
    x = 0; y = 0; z = 0
    
    if r > 0.04045:
        r = math.pow((r + 0.055) / 1.055, 2.4)
    else:
        r = r / 12.92

    if g > 0.04045:
        g = math.pow((g + 0.055) / 1.055, 2.4)
    else:
        g = g / 12.92
        
    if b > 0.04045:
        b = math.pow((b + 0.055) / 1.055, 2.4)
    else:
        b = b / 12.92     
        
#     r = (r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
#     g = (g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
#     b = (b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;

    x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047
    y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.00000
    z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883

    if x > 0.008856:
        x = math.pow(x, 1 / 3)
    else:
        x = (7.787 * x) + 16 / 116
        
    if y > 0.008856:
        y = math.pow(y, 1 / 3)
    else:
        y = (7.787 * y) + 16 / 116
    
    if z > 0.008856:
        z = math.pow(z, 1 / 3)
    else:
        z = (7.787 * z) + 16 / 116   
        
#     x = (x > 0.008856) ? Math.pow(x, 1 / 3) : (7.787 * x) + 16 / 116;
#     y = (y > 0.008856) ? Math.pow(y, 1 / 3) : (7.787 * y) + 16 / 116;
#     z = (z > 0.008856) ? Math.pow(z, 1 / 3) : (7.787 * z) + 16 / 116;
    return [(116 * y) - 16, 500 * (x - y), 200 * (y - z)]

def distance2(x0, y0, z0, x1, y1, z1):
    return ((x1 - x0) * (x1 - x0)) + ((y1 - y0) * (y1 - y0)) + ((z1 - z0) * (z1 - z0))

def distance(x0, y0, z0, x1, y1, z1):
    return math.sqrt(distance2(x0, y0, z0, x1, y1, z1))
