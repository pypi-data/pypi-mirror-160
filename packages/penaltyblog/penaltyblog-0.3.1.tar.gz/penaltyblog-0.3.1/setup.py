# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['penaltyblog',
 'penaltyblog.clubelo',
 'penaltyblog.colley',
 'penaltyblog.footballdata',
 'penaltyblog.fpl',
 'penaltyblog.implied',
 'penaltyblog.massey',
 'penaltyblog.metrics',
 'penaltyblog.poisson']

package_data = \
{'': ['*']}

install_requires = \
['PuLP>=2.5.0', 'numpy>=1.19.2', 'pandas>=1.1.3', 'scipy>=1.5.0']

setup_kwargs = {
    'name': 'penaltyblog',
    'version': '0.3.1',
    'description': 'Library from http://pena.lt/y/blog for modelling and working with football (soccer) data',
    'long_description': '# Penalty Blog\n\nThe `penaltyblog` package contains code from [http://pena.lt/y/blog](http://pena.lt/y/blog) for working with football (soccer) data.\n\n## Requirements\n\n    - python >=3.6\n    - numpy >=1.19.2\n    - pandas >=1.1.3\n    - scipy >=1.5.0\n\n## Installation\n\n`pip install penaltyblog`\n\n\n## Example\n\nThere are examples of all the functions available in the [Examples section](https://github.com/martineastwood/penaltyblog/tree/master/examples).\n\n## Download Data from football-data.co.uk\n\n`penaltyblog` contains some helper functions for downloading data from [football-data.co.uk](http://football-data.co.uk).\n\n\n### List the countries available \n\n```python\nimport penaltyblog as pb\npb.footballdata.list_countries()\n```\n\n```\n[\'belgium\',\n \'england\',\n \'france\',\n \'germany\',\n \'greece\',\n \'italy\',\n \'portugal\',\n \'scotland\',\n \'spain\',\n \'turkey\']\n```\n\n### Fetch the data\n\nThe first parameter is the country of interest, the second is the starting year of the season and the third paramater is the level of the division of interest, where `0` is the highest division (e.g. England\'s Premier League), `1` is the second highest (e.g. England\'s Championship) etc.\n\n```python\nimport penaltyblog as pb\n\ndf = pb.footballdata.fetch_data("england", 2018, 0)\ndf[["Date", "HomeTeam", "AwayTeam", "FTHG", "FTAG"]].head()\n```\n\n|      | Date                | HomeTeam     | AwayTeam       | FTHG | FTAG |\n| ---: | :------------------ | :----------- | :------------- | ---: | ---: |\n|    0 | 2018-08-10 00:00:00 | Man United   | Leicester      |    2 |    1 |\n|    1 | 2018-08-11 00:00:00 | Bournemouth  | Cardiff        |    2 |    0 |\n|    2 | 2018-08-11 00:00:00 | Fulham       | Crystal Palace |    0 |    2 |\n|    3 | 2018-08-11 00:00:00 | Huddersfield | Chelsea        |    0 |    3 |\n|    4 | 2018-08-11 00:00:00 | Newcastle    | Tottenham      |    1 |    2 |\n\n## Predicting Goals\n\n`penaltyblog` contains models designed for predicting the number of goals scored in football (soccer) games. Although aimed at football (soccer), they may also be useful for other sports, such as hockey.\n\n### The Basic Poisson Model\n\nLet\'s start off by downloading some example scores from the awesome [football-data](http://football-data.co.uk) website.\n\n```python\nimport penaltyblog as pb\ndf = pb.footballdata.fetch_data("England", 2018, 0)\ndf[["Date", "HomeTeam", "AwayTeam", "FTHG", "FTAG"]].head()\n```\n\n|      | Date                | HomeTeam     | AwayTeam       | FTHG | FTAG |\n| ---: | :------------------ | :----------- | :------------- | ---: | ---: |\n|    0 | 2018-08-10 00:00:00 | Man United   | Leicester      |    2 |    1 |\n|    1 | 2018-08-11 00:00:00 | Bournemouth  | Cardiff        |    2 |    0 |\n|    2 | 2018-08-11 00:00:00 | Fulham       | Crystal Palace |    0 |    2 |\n|    3 | 2018-08-11 00:00:00 | Huddersfield | Chelsea        |    0 |    3 |\n|    4 | 2018-08-11 00:00:00 | Newcastle    | Tottenham      |    1 |    2 |\n\nNext, we create a basic Poisson model and fit it to the data.\n\n```python\npois = pb.poisson.PoissonGoalsModel(\n    df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"])\npois.fit()\n```\n\nLet\'s take a look at the fitted parameters.\n\n```python\npois\n```\n\n```\nModule: Penaltyblog\n\nModel: Poisson\n\nNumber of parameters: 41\nLog Likelihood: -1065.077\nAIC: 2212.154\n\nTeam                 Attack               Defence             \n------------------------------------------------------------\nArsenal              1.362                -0.856              \nBournemouth          1.115                -0.555              \nBrighton             0.634                -0.731              \nBurnley              0.894                -0.595              \nCardiff              0.614                -0.592              \nChelsea              1.202                -1.135              \nCrystal Palace       1.004                -0.839              \nEverton              1.055                -0.978              \nFulham               0.626                -0.431              \nHuddersfield         0.184                -0.507              \nLeicester            1.0                  -0.939              \nLiverpool            1.532                -1.683              \nMan City             1.598                -1.633              \nMan United           1.249                -0.807              \nNewcastle            0.805                -0.948              \nSouthampton          0.891                -0.641              \nTottenham            1.264                -1.131              \nWatford              1.03                 -0.731              \nWest Ham             1.026                -0.801              \nWolves               0.916                -0.985              \n------------------------------------------------------------\nHome Advantage: 0.225\n```\n\n### The Dixon and Coles Adjustment\n\nThe basic Poisson model struggles somewhat with the probabilities for low scoring games. Dixon and Coles (1997) added in an adjustment factor (rho) that modifies the probabilities for 0-0, 1-0 and 0-1 scorelines to account for this.\n\n```python\ndc = pb.poisson.DixonColesGoalModel(\n    df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"])\ndc.fit()\ndc\n```\n\n```\nModule: Penaltyblog\n\nModel: Dixon and Coles\n\nNumber of parameters: 42\nLog Likelihood: -1064.943\nAIC: 2213.886\n\nTeam                 Attack               Defence             \n------------------------------------------------------------\nArsenal              1.36                 -0.858              \nBournemouth          1.115                -0.555              \nBrighton             0.632                -0.733              \nBurnley              0.897                -0.592              \nCardiff              0.615                -0.591              \nChelsea              1.205                -1.13               \nCrystal Palace       1.007                -0.837              \nEverton              1.054                -0.977              \nFulham               0.625                -0.433              \nHuddersfield         0.18                 -0.507              \nLeicester            0.996                -0.94               \nLiverpool            1.534                -1.679              \nMan City             1.599                -1.638              \nMan United           1.251                -0.807              \nNewcastle            0.806                -0.946              \nSouthampton          0.897                -0.636              \nTottenham            1.259                -1.137              \nWatford              1.031                -0.729              \nWest Ham             1.023                -0.803              \nWolves               0.914                -0.988              \n------------------------------------------------------------\nHome Advantage: 0.225\nRho: -0.041\n```\n\n\n### The Rue and Salvesen Adjustment\n\nRue and Salvesen (1999) added in an additional psycological effect factor (gamma) where Team A will under-estimate Team B if Team A is stronger than team B. They also truncate scorelines to a maximum of five goals, e.g. a score of 7-3 becomes 5-3, stating that any goals above 5 are non-informative.\n\n```python\nrs = pb.poisson.RueSalvesenGoalModel(\n    df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"])\n\nrs.fit()\nrs\n```\n\n```\nModule: Penaltyblog\n\nModel: Rue Salvesen\n\nNumber of parameters: 43\nLog Likelihood: -1061.167\nAIC: 2208.334\n\nTeam                 Attack               Defence             \n------------------------------------------------------------\nArsenal              1.496                -0.988              \nBournemouth          1.27                 -0.705              \nBrighton             0.559                -0.655              \nBurnley              0.964                -0.654              \nCardiff              0.585                -0.556              \nChelsea              1.183                -1.129              \nCrystal Palace       1.027                -0.852              \nEverton              1.034                -0.974              \nFulham               0.653                -0.455              \nHuddersfield         0.023                -0.359              \nLeicester            0.978                -0.916              \nLiverpool            1.445                -1.585              \nMan City             1.503                -1.571              \nMan United           1.367                -0.917              \nNewcastle            0.72                 -0.854              \nSouthampton          0.942                -0.693              \nTottenham            1.243                -1.131              \nWatford              1.097                -0.79               \nWest Ham             1.062                -0.836              \nWolves               0.85                 -0.919              \n------------------------------------------------------------\nHome Advantage: 0.222\nRho: -0.04\nGamma: 0.692\n```\n\n\n### Making Predictions\n\nTo make a prediction using any of the above models, just pass the name of the home and away teams to the `predict` function. This returns the `FootballProbabilityGrid` class that can convert the output from the model into probabilities for various betting markets.\n\n```python\nprobs = rs.predict("Watford", "Wolves")\nprobs\n```\n\n```\nModule: Penaltyblog\n\nClass: FootballProbabilityGrid\n\nHome Goal Expectation: 1.3094663275662697\nAway Goal Expectation: 1.2096084394688094\n\nHome Win: 0.3843462702759874\nDraw: 0.2787256663458056\nAway Win: 0.3369280633610962\n```\n\n### Home / Draw / Away\n\n```python\n# also known as 1x2\nprobs.home_draw_away\n```\n\n```python\n[0.3843462702759874, 0.2787256663458056, 0.3369280633610962]\n```\n\n### Total Goals\n\n```python\nprobs.total_goals("over", 2.5)\n```\n\n```python\n0.4610704441088047\n```\n\n```python\nprobs.total_goals("under", 2.5)\n```\n\n```python\n0.5389295558740843\n```\n\n### Asian Handicaps\n\n```python\nprobs.asian_handicap("home", 1.5)\n```\n\n```python\n0.17531437781532913\n```\n\n```python\nprobs.asian_handicap("away", -1.5)\n```\n\n```python\n0.8246856221675609\n```\n\n### Model Parameters\n\nYou can access the model\'s parameters via the `get_params` function.\n\n```python\nfrom pprint import pprint\nparams = my_model.get_params()\npprint(params)\n```\n\n```python\n{\'attack_Arsenal\': 1.4960574633781003,\n \'attack_Bournemouth\': 1.2701540413261327,\n \'attack_Brighton\': 0.559186251363228,\n \'attack_Burnley\': 0.9644520899122194,\n \'attack_Cardiff\': 0.5847648397569006,\n \'attack_Chelsea\': 1.1828466188120765,\n \'attack_Crystal Palace\': 1.0273361069287597,\n \'attack_Everton\': 1.0335248035400801,\n \'attack_Fulham\': 0.6531864264818924,\n \'attack_Huddersfield\': 0.023109559960240708,\n \'attack_Leicester\': 0.977933119588144,\n \'attack_Liverpool\': 1.4451581320799645,\n \'attack_Man City\': 1.5025454369883477,\n \'attack_Man United\': 1.366845541477835,\n \'attack_Newcastle\': 0.720009733703693,\n \'attack_Southampton\': 0.9416226570416543,\n \'attack_Tottenham\': 1.2427047093744437,\n \'attack_Watford\': 1.096790079793436,\n \'attack_West Ham\': 1.06163359275858,\n \'attack_Wolves\': 0.8501387957342722,\n \'defence_Arsenal\': -0.9879049844176601,\n \'defence_Bournemouth\': -0.704968272653022,\n \'defence_Brighton\': -0.6545658993274335,\n \'defence_Burnley\': -0.6541299575160815,\n \'defence_Cardiff\': -0.5555542344325824,\n \'defence_Chelsea\': -1.128898069212659,\n \'defence_Crystal Palace\': -0.8518829374985971,\n \'defence_Everton\': -0.9742632965054263,\n \'defence_Fulham\': -0.45545035895833286,\n \'defence_Huddersfield\': -0.3586836043107179,\n \'defence_Leicester\': -0.915653821531362,\n \'defence_Liverpool\': -1.5850200706445228,\n \'defence_Man City\': -1.5713140731733608,\n \'defence_Man United\': -0.9165982110339421,\n \'defence_Newcastle\': -0.8538889602642802,\n \'defence_Southampton\': -0.6925502345992922,\n \'defence_Tottenham\': -1.1307038809506598,\n \'defence_Watford\': -0.7898505955782175,\n \'defence_West Ham\': -0.8356435683761823,\n \'defence_Wolves\': -0.9188112323803922,\n \'home_advantage\': 0.22164932659641978,\n \'rho\': -0.04033232667301132,\n \'rue_salvesen\': 0.6922490800541602}\n```\n\n## Ratings\n\n### Massey Ratings\n\nCalculates the overall [Massey ratings](https://en.wikipedia.org/wiki/Kenneth_Massey), plus Massey attack and defence ratings too.\n\n```python\nimport penaltyblog as pb\n\ndf = pb.footballdata.fetch_data("england", 2020, 0)\npb.ratings.massey(df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"])\n```\n\n|      | team             | rating |   offence |   defence |\n| ---: | :--------------- | -----: | --------: | --------: |\n|    0 | Man City         |  1.275 |   1.48618 | -0.211184 |\n|    1 | Man United       |  0.725 |   1.23896 | -0.513962 |\n|    2 | Liverpool        |   0.65 |   1.10424 |  -0.45424 |\n|    3 | Tottenham        |  0.575 |   1.10841 | -0.533406 |\n|    4 | Chelsea          |   0.55 |  0.832018 | -0.282018 |\n|    5 | Leicester        |   0.45 |   1.11535 | -0.665351 |\n|    6 | Arsenal          |    0.4 |  0.757018 | -0.357018 |\n|    7 | West Ham         |  0.375 |  0.952851 | -0.577851 |\n|    8 | Aston Villa      |  0.225 |   0.76674 |  -0.54174 |\n|    9 | Leeds            |    0.2 |  0.962573 | -0.762573 |\n|   10 | Everton          | -0.025 |  0.558406 | -0.583406 |\n|   11 | Brighton         |  -0.15 |  0.370906 | -0.520906 |\n|   12 | Wolves           |   -0.4 |  0.273684 | -0.673684 |\n|   13 | Newcastle        |   -0.4 |  0.551462 | -0.951462 |\n|   14 | Southampton      | -0.525 |  0.586184 |  -1.11118 |\n|   15 | Burnley          |  -0.55 |  0.198684 | -0.748684 |\n|   16 | Crystal Palace   | -0.625 |  0.425073 |  -1.05007 |\n|   17 | Fulham           |  -0.65 | 0.0375731 | -0.687573 |\n|   18 | West Brom        | -1.025 |  0.280629 |  -1.30563 |\n|   19 | Sheffield United | -1.075 |  -0.13326 |  -0.94174 |\n\n### Colley Ratings\n\nCalculates [Colley ratings](https://en.wikipedia.org/wiki/Colley_Matrix). Since Colley ratings don\'t explicitly define how to handle tied results, you can set whether to include them and how much weighting they should receive compared to a win.\n\n```python\nimport penaltyblog as pb\n\ndf = pb.footballdata.fetch_data("england", 2020, 0)\npb.ratings.colley(df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"], include_draws=True, draw_weight=1/3)\n```\n\n|      | team             |   rating |\n| ---: | :--------------- | -------: |\n|    0 | Man City         |  1.42857 |\n|    1 | Man United       |  1.38095 |\n|    2 | Liverpool        |   1.3254 |\n|    3 | Chelsea          |  1.31746 |\n|    4 | West Ham         |  1.28571 |\n|    5 | Leicester        |  1.27778 |\n|    6 | Tottenham        |   1.2619 |\n|    7 | Arsenal          |  1.24603 |\n|    8 | Everton          |   1.2381 |\n|    9 | Leeds            |  1.21429 |\n|   10 | Aston Villa      |  1.19841 |\n|   11 | Brighton         |  1.14286 |\n|   12 | Newcastle        |  1.13492 |\n|   13 | Wolves           |  1.13492 |\n|   14 | Crystal Palace   |  1.11905 |\n|   15 | Southampton      |  1.10317 |\n|   16 | Burnley          |   1.0873 |\n|   17 | Fulham           |  1.03175 |\n|   18 | West Brom        |        1 |\n|   19 | Sheffield United | 0.904762 |\n\n\n```python\nimport penaltyblog as pb\n\ndf = pb.footballdata.fetch_data("england", 2020, 0)\npb.ratings.colley(df["FTHG"], df["FTAG"], df["HomeTeam"], df["AwayTeam"], include_draws=False)\n```\n\n|      | team             |   rating |\n| ---: | :--------------- | -------: |\n|    0 | Man City         |     0.75 |\n|    1 | Man United       | 0.678571 |\n|    2 | Liverpool        | 0.630952 |\n|    3 | Chelsea          | 0.619048 |\n|    4 | Leicester        | 0.595238 |\n|    5 | West Ham         | 0.595238 |\n|    6 | Tottenham        | 0.571429 |\n|    7 | Arsenal          | 0.559524 |\n|    8 | Everton          | 0.547619 |\n|    9 | Leeds            | 0.535714 |\n|   10 | Aston Villa      | 0.511905 |\n|   11 | Newcastle        | 0.440476 |\n|   12 | Wolves           | 0.440476 |\n|   13 | Brighton         | 0.428571 |\n|   14 | Crystal Palace   | 0.428571 |\n|   15 | Southampton      | 0.416667 |\n|   16 | Burnley          | 0.392857 |\n|   17 | Fulham           | 0.321429 |\n|   18 | West Brom        | 0.297619 |\n|   19 | Sheffield United | 0.238095 |\n\n\n## Implied Probabilities\n\nRemoves the overround and gets the implied probabilities from odds via a variety of methods\n\n### Multiplicative\n\nNormalizes the probabilites so they sum to 1.0 by dividing the inverse of the odds by the sum of the inverse of the odds\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.multiplicative(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.35873804, 0.42112726, 0.2201347 ]),\n \'margin\': 0.03242570633874986,\n \'method\': \'multiplicative\'}\n```\n\n### Additive\n\nNormalizes the probabilites so they sum to 1.0 by removing an equal amount from each\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.additive(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.3595618 , 0.42397404, 0.21646416]),\n \'margin\': 0.03242570633874986,\n \'method\': \'additive\'}\n```\n\n### Power\n\nSolves for the power coefficient that normalizes the inverse of the odds to sum to 1.0\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.power(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.3591711 , 0.42373075, 0.21709815]),\n \'margin\': 0.03242570633874986,\n \'method\': \'power\',\n \'k\': 1.0309132393169356}\n ```\n\n### Shin\n\nUses the Shin (1992, 1993) method to calculate the implied probabilities\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.shin(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.35934392, 0.42324385, 0.21741223]),\n \'margin\': 0.03242570633874986,\n \'method\': \'shin\',\n \'z\': 0.016236442857291165}\n ```\n\n### Differential Margin Weighting\n\nUses the differential margin approach described by Joesph Buchdahl in his `wisdom of the crowds` article\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.differential_margin_weighting(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.3595618 , 0.42397404, 0.21646416]),\n \'margin\': 0.03242570633874986,\n \'method\': \'differential_margin_weighting\'}\n ```\n\n### Odds Ratio\n\nUses Keith Cheung\'s odds ratio approach, as discussed by Joesph Buchdahl\'s in his `wisdom of the crowds` article, to calculate the implied probabilities\n\n```python\nimport penaltyblog as pb\n\nodds = [2.7, 2.3, 4.4]\npb.implied.odds_ratio(odds)\n```\n\n```python\n{\'implied_probabilities\': array([0.35881036, 0.42256142, 0.21862822]),\n \'margin\': 0.03242570633874986,\n \'method\': \'odds_ratio\',\n \'c\': 1.05116912729218}\n ```\n\n## Rank Probability Scores\n\nBased on Constantinou and Fenton (2021), `penaltyblog` contains a function for calculating Rank Probability Scores for assessing home, draw, away probability forecasts.\n\n`predictions` is a list of home, draw, away probabilities and `observed` is the zero-based index for which outcome actually occurred.\n\n```python\nimport penaltyblog as pb\n\npredictions = [\n    [1, 0, 0],\n    [0.9, 0.1, 0],\n    [0.8, 0.1, 0.1],\n    [0.5, 0.25, 0.25],\n    [0.35, 0.3, 0.35],\n    [0.6, 0.3, 0.1],\n    [0.6, 0.25, 0.15],\n    [0.6, 0.15, 0.25],\n    [0.57, 0.33, 0.1],\n    [0.6, 0.2, 0.2],\n]\n\nobserved = [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]\n\nfor p, o in zip(predictions, observed):\n    rps = pb.metrics.rps(p, o)\n    print(round(rps, 4))\n```\n\n```python\n0.0\n0.005\n0.025\n0.1562\n0.1225\n0.185\n0.0913\n0.1113\n0.0975\n0.1\n```\n\n## Download ELO rating from clubelo.com\n\n### Download ELO ratings for a given date\n\n```python\nimport penaltyblog as pb\ndf = pb.clubelo.fetch_rankings_by_date(2010, 1, 1)\ndf.head()\n```\n\n|      | Rank | Club        | Country | Level |     Elo | From                | To                  |\n| ---: | ---: | :---------- | :------ | ----: | ------: | :------------------ | :------------------ |\n|    0 |    1 | Barcelona   | ESP     |     1 | 1987.68 | 2009-12-18 00:00:00 | 2010-01-02 00:00:00 |\n|    1 |    2 | Chelsea     | ENG     |     1 | 1945.54 | 2009-12-29 00:00:00 | 2010-01-16 00:00:00 |\n|    2 |    3 | Man United  | ENG     |     1 | 1928.53 | 2009-12-31 00:00:00 | 2010-01-09 00:00:00 |\n|    3 |    4 | Real Madrid | ESP     |     1 | 1902.72 | 2009-12-20 00:00:00 | 2010-01-03 00:00:00 |\n|    4 |    5 | Inter       | ITA     |     1 | 1884.49 | 2009-12-21 00:00:00 | 2010-01-06 00:00:00 |\n\n### List all teams with ratings available\n\n```python\nimport penaltyblog as pb\nteams = pb.clubelo.list_all_teams()\nteams[:5]\n```\n\n```python\n[\'Man City\', \'Bayern\', \'Liverpool\', \'Real Madrid\', \'Man United\']\n```\n\n### Download Historical ELO ratings for a given team\n\n```python\nimport penaltyblog as pb\ndf = pb.clubelo.fetch_rankings_by_team("barcelona")\ndf.head()\n```\n\n|      | Rank | Club      | Country | Level |     Elo | From                | To                  |\n| ---: | :--- | :-------- | :------ | ----: | ------: | :------------------ | :------------------ |\n|    0 | None | Barcelona | ESP     |     1 |  1636.7 | 1939-10-22 00:00:00 | 1939-12-03 00:00:00 |\n|    1 | None | Barcelona | ESP     |     1 |  1626.1 | 1939-12-04 00:00:00 | 1939-12-10 00:00:00 |\n|    2 | None | Barcelona | ESP     |     1 | 1636.73 | 1939-12-11 00:00:00 | 1939-12-17 00:00:00 |\n|    3 | None | Barcelona | ESP     |     1 | 1646.95 | 1939-12-18 00:00:00 | 1939-12-24 00:00:00 |\n|    4 | None | Barcelona | ESP     |     1 | 1637.42 | 1939-12-25 00:00:00 | 1939-12-31 00:00:00 |\n\n## References\n\n- Mark J. Dixon and Stuart G. Coles (1997) Modelling Association Football Scores and Inefficiencies in the Football Betting Market.\n- Håvard Rue and Øyvind Salvesen (1999) Prediction and Retrospective Analysis of Soccer Matches in a League.\n- Anthony C. Constantinou and Norman E. Fenton (2012) Solving the problem of inadequate scoring rules for assessing probabilistic football forecast models\n- Hyun Song Shin (1992) Prices of State Contingent Claims with Insider Traders, and the Favourite-Longshot Bias\n- Hyun Song Shin (1993) Measuring the Incidence of Insider Trading in a Market for State-Contingent Claims\n- Joseph Buchdahl (2015) The Wisdom of the Crowd\n',
    'author': 'Martin Eastwood',
    'author_email': 'martin.eastwood@gmx.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/martineastwood/penaltyblog',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
