#!/usr/bin/python
#
# Copyright 2018-2022 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    The version of the OpenAPI document: 1.19.0
    Contact: contact@polyaxon.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from polyaxon_sdk.configuration import Configuration


class V1TensorboardType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port': 'int',
        'uuids': 'list[str]',
        'use_names': 'bool',
        'path_prefix': 'str',
        'plugins': 'str'
    }

    attribute_map = {
        'port': 'port',
        'uuids': 'uuids',
        'use_names': 'use_names',
        'path_prefix': 'path_prefix',
        'plugins': 'plugins'
    }

    def __init__(self, port=None, uuids=None, use_names=None, path_prefix=None, plugins=None, local_vars_configuration=None):  # noqa: E501
        """V1TensorboardType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._port = None
        self._uuids = None
        self._use_names = None
        self._path_prefix = None
        self._plugins = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if uuids is not None:
            self.uuids = uuids
        if use_names is not None:
            self.use_names = use_names
        if path_prefix is not None:
            self.path_prefix = path_prefix
        if plugins is not None:
            self.plugins = plugins

    @property
    def port(self):
        """Gets the port of this V1TensorboardType.  # noqa: E501


        :return: The port of this V1TensorboardType.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this V1TensorboardType.


        :param port: The port of this V1TensorboardType.  # noqa: E501
        :type port: int
        """

        self._port = port

    @property
    def uuids(self):
        """Gets the uuids of this V1TensorboardType.  # noqa: E501


        :return: The uuids of this V1TensorboardType.  # noqa: E501
        :rtype: list[str]
        """
        return self._uuids

    @uuids.setter
    def uuids(self, uuids):
        """Sets the uuids of this V1TensorboardType.


        :param uuids: The uuids of this V1TensorboardType.  # noqa: E501
        :type uuids: list[str]
        """

        self._uuids = uuids

    @property
    def use_names(self):
        """Gets the use_names of this V1TensorboardType.  # noqa: E501


        :return: The use_names of this V1TensorboardType.  # noqa: E501
        :rtype: bool
        """
        return self._use_names

    @use_names.setter
    def use_names(self, use_names):
        """Sets the use_names of this V1TensorboardType.


        :param use_names: The use_names of this V1TensorboardType.  # noqa: E501
        :type use_names: bool
        """

        self._use_names = use_names

    @property
    def path_prefix(self):
        """Gets the path_prefix of this V1TensorboardType.  # noqa: E501


        :return: The path_prefix of this V1TensorboardType.  # noqa: E501
        :rtype: str
        """
        return self._path_prefix

    @path_prefix.setter
    def path_prefix(self, path_prefix):
        """Sets the path_prefix of this V1TensorboardType.


        :param path_prefix: The path_prefix of this V1TensorboardType.  # noqa: E501
        :type path_prefix: str
        """

        self._path_prefix = path_prefix

    @property
    def plugins(self):
        """Gets the plugins of this V1TensorboardType.  # noqa: E501


        :return: The plugins of this V1TensorboardType.  # noqa: E501
        :rtype: str
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """Sets the plugins of this V1TensorboardType.


        :param plugins: The plugins of this V1TensorboardType.  # noqa: E501
        :type plugins: str
        """

        self._plugins = plugins

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TensorboardType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1TensorboardType):
            return True

        return self.to_dict() != other.to_dict()
